This file is a merged representation of the entire codebase, combined into a single document by Repomix.

<file_summary>
This section contains a summary of this file.

<purpose>
This file contains a packed representation of the entire repository's contents.
It is designed to be easily consumable by AI systems for analysis, code review,
or other automated processes.
</purpose>

<file_format>
The content is organized as follows:
1. This summary section
2. Repository information
3. Directory structure
4. Repository files (if enabled)
5. Multiple file entries, each consisting of:
  - File path as an attribute
  - Full contents of the file
</file_format>

<usage_guidelines>
- This file should be treated as read-only. Any changes should be made to the
  original repository files, not this packed version.
- When processing this file, use the file path to distinguish
  between different files in the repository.
- Be aware that this file may contain sensitive information. Handle it with
  the same level of security as you would the original repository.
</usage_guidelines>

<notes>
- Some files may have been excluded based on .gitignore rules and Repomix's configuration
- Binary files are not included in this packed representation. Please refer to the Repository Structure section for a complete list of file paths, including binary files
- Files matching patterns in .gitignore are excluded
- Files matching default ignore patterns are excluded
- Files are sorted by Git change count (files with more changes are at the bottom)
</notes>

</file_summary>

<directory_structure>
.taskwing/
  tasks/
    tasks.json
    tasks.json.checksum
  .taskwing.yaml
public/
  vite.svg
src/
  assets/
    react.svg
  components/
    CookieConsent.css
    CookieConsent.tsx
    FAQSection.css
    FAQSection.tsx
    InstallationWizard.css
    InstallationWizard.tsx
    LazySection.tsx
    OptimizedImage.tsx
    TestimonialsSection.css
    TestimonialsSection.tsx
    TypewriterTerminal.css
    TypewriterTerminal.tsx
  hooks/
    useAnalytics.ts
  utils/
    analytics.ts
  App.css
  App.tsx
  index.css
  main.tsx
  vite-env.d.ts
.env.example
.gitignore
eslint.config.js
index.html
package.json
README.md
tsconfig.app.json
tsconfig.json
tsconfig.node.json
vite.config.ts
</directory_structure>

<files>
This section contains the contents of the repository's files.

<file path=".taskwing/tasks/tasks.json">
{
  "tasks": [
    {
      "id": "996e6dca-0789-4f56-8833-c50c656ead92",
      "title": "Implement analytics and conversion tracking",
      "description": "Add Google Analytics 4, conversion tracking for downloads, and heatmap analysis setup",
      "acceptanceCriteria": "- GA4 implementation with enhanced ecommerce\n- Download button click tracking\n- Scroll depth and engagement metrics\n- A/B testing framework setup\n- Privacy-compliant cookie consent",
      "status": "completed",
      "priority": "high",
      "createdAt": "2025-08-17T20:45:16.788144Z",
      "updatedAt": "2025-08-17T21:03:00.646739Z",
      "completedAt": "2025-08-17T21:03:00.646739Z"
    },
    {
      "id": "9f4ede59-ddb0-4f41-adc2-355fa143eaaa",
      "title": "Create downloadable resources section",
      "description": "Add section with downloadable quick start guides, cheat sheets, and integration examples",
      "acceptanceCriteria": "- PDF quick start guide\n- Command cheat sheet download\n- MCP integration examples\n- Visual brand assets for developers\n- Email capture for premium resources",
      "status": "pending",
      "priority": "low",
      "createdAt": "2025-08-17T20:45:16.788748Z",
      "updatedAt": "2025-08-17T20:45:16.788748Z"
    },
    {
      "id": "98fb7320-26e6-41f8-8793-8173ea2fc70f",
      "title": "Add interactive terminal demo with live typing animation",
      "description": "Replace static terminal content with animated typing sequences that showcase real TaskWing commands and outputs",
      "acceptanceCriteria": "- Typewriter animation effect for commands\n- Realistic command timing and pauses\n- Multiple demo sequences that loop\n- Mobile-friendly animation performance",
      "status": "completed",
      "priority": "high",
      "createdAt": "2025-08-17T20:45:16.785537Z",
      "updatedAt": "2025-08-17T20:52:32.324564Z",
      "completedAt": "2025-08-17T20:52:32.324564Z"
    },
    {
      "id": "20ec74da-6685-480c-b92d-8369c6c5358b",
      "title": "Create blog/changelog integration preview",
      "description": "Add a preview section showing latest blog posts or changelog entries to drive engagement",
      "acceptanceCriteria": "- Dynamic content integration (mock API)\n- Card-based layout for posts\n- 'Read more' calls-to-action\n- Responsive design for all screen sizes\n- Loading states and error handling",
      "status": "pending",
      "priority": "low",
      "createdAt": "2025-08-17T20:45:16.790512Z",
      "updatedAt": "2025-08-17T20:45:16.790512Z"
    },
    {
      "id": "14ea7074-68bb-4c54-a26b-199207956e1c",
      "title": "Implement micro-animations and scroll effects",
      "description": "Add subtle animations for better user engagement including scroll-triggered animations and hover effects",
      "acceptanceCriteria": "- Fade-in animations for sections on scroll\n- Smooth parallax effects for hero section\n- Hover animations for feature cards\n- Loading animations for interactive elements\n- Performance optimized (60fps target)",
      "status": "pending",
      "priority": "low",
      "createdAt": "2025-08-17T20:45:16.787103Z",
      "updatedAt": "2025-08-17T20:45:16.787103Z"
    },
    {
      "id": "49b62715-8887-467b-bd7b-46d4f6a16f8d",
      "title": "Create testimonials and social proof section",
      "description": "Add a dedicated section with user testimonials, GitHub stars, download counts, and company logos using TaskWing",
      "acceptanceCriteria": "- 3-4 compelling user testimonials with photos\n- GitHub stars counter (dynamic if possible)\n- Download/usage statistics\n- Company logos or 'Used by' section\n- Responsive carousel or grid layout",
      "status": "completed",
      "priority": "medium",
      "createdAt": "2025-08-17T20:45:16.785906Z",
      "updatedAt": "2025-08-17T21:35:50.086994Z",
      "completedAt": "2025-08-17T21:35:50.086994Z"
    },
    {
      "id": "3709b047-36da-474e-9d50-0f85eb6cc1da",
      "title": "Implement structured data markup for better SEO",
      "description": "Add JSON-LD structured data for software application, organization, and FAQ schema to improve search engine visibility and rich snippets",
      "acceptanceCriteria": "- JSON-LD markup for SoftwareApplication schema\n- Organization schema with contact info\n- FAQ schema for common questions\n- Validated with Google's Structured Data Testing Tool",
      "status": "completed",
      "priority": "high",
      "createdAt": "2025-08-17T20:45:16.783719Z",
      "updatedAt": "2025-08-17T20:48:17.159273Z",
      "completedAt": "2025-08-17T20:48:17.159273Z"
    },
    {
      "id": "6884a8f8-4775-4bb4-9dd1-051cddc3d57f",
      "title": "Add comprehensive FAQ section",
      "description": "Create an expandable FAQ section addressing common questions about TaskWing installation, usage, and MCP integration",
      "acceptanceCriteria": "- 8-10 relevant FAQ items\n- Expandable/collapsible design\n- Search functionality within FAQ\n- Categories for different types of questions\n- Linked from main navigation",
      "status": "completed",
      "priority": "medium",
      "createdAt": "2025-08-17T20:45:16.787558Z",
      "updatedAt": "2025-08-17T22:53:18.691296Z",
      "completedAt": "2025-08-17T22:53:18.691296Z"
    },
    {
      "id": "0618c930-4b22-4569-9bc5-6d3062fb0a1a",
      "title": "Add accessibility improvements",
      "description": "Enhance accessibility with proper ARIA labels, keyboard navigation, and screen reader support",
      "acceptanceCriteria": "- WCAG 2.1 AA compliance\n- Keyboard navigation for all interactive elements\n- Screen reader friendly content structure\n- Sufficient color contrast ratios\n- Focus indicators for all interactive elements",
      "status": "completed",
      "priority": "high",
      "createdAt": "2025-08-17T20:45:16.790005Z",
      "updatedAt": "2025-08-17T21:10:58.513128Z",
      "completedAt": "2025-08-17T21:10:58.513128Z"
    },
    {
      "id": "25410d50-ae36-48a2-a921-2b378a2c962e",
      "title": "Optimize mobile navigation and interactions",
      "description": "Improve mobile menu, touch targets, and responsive behavior for better mobile experience",
      "acceptanceCriteria": "- Hamburger menu for mobile navigation\n- Touch-friendly button sizes (44px minimum)\n- Improved responsive breakpoints\n- Better terminal readability on mobile\n- Smooth touch scrolling and interactions",
      "status": "completed",
      "priority": "high",
      "createdAt": "2025-08-17T20:45:16.7863Z",
      "updatedAt": "2025-08-17T21:10:50.303653Z",
      "completedAt": "2025-08-17T21:10:50.303653Z"
    },
    {
      "id": "d9493263-72bb-499a-a007-f1cf9c921750",
      "title": "Optimize page loading performance",
      "description": "Implement performance optimizations including image optimization, code splitting, and lazy loading",
      "acceptanceCriteria": "- WebP image format with fallbacks\n- Lazy loading for below-fold content\n- Font loading optimization\n- Bundle size under 500KB\n- Core Web Vitals scores in green range",
      "status": "completed",
      "priority": "medium",
      "createdAt": "2025-08-17T20:45:16.78943Z",
      "updatedAt": "2025-08-17T21:14:30.42446Z",
      "completedAt": "2025-08-17T21:14:30.42446Z"
    },
    {
      "id": "eb0b513b-72e3-404a-8635-b8fa0a73c00e",
      "title": "Add installation wizard and getting started flow",
      "description": "Create an interactive installation guide with platform detection and step-by-step setup instructions",
      "acceptanceCriteria": "- Auto-detect user's OS and show relevant install commands\n- Tabbed interface for different installation methods\n- Copy-to-clipboard functionality for commands\n- Visual progress indicators for setup steps\n- Link to detailed documentation",
      "status": "completed",
      "priority": "medium",
      "createdAt": "2025-08-17T20:45:16.786725Z",
      "updatedAt": "2025-08-17T21:41:20.398175Z",
      "completedAt": "2025-08-17T21:41:20.398175Z"
    }
  ],
  "totalCount": 12
}
</file>

<file path=".taskwing/tasks/tasks.json.checksum">
7b2b327e5acd5ede62a9fd787b28a6bbc8c9e444cceaa65930e2c099e3f70d16
</file>

<file path=".taskwing/.taskwing.yaml">
config: ""
data:
    file: tasks.json
    format: json
greeting: Hello from TaskWing!
llm:
    apikey: ""
    maxoutputtokens: 16384
    modelname: gpt-5-mini-2025-08-07
    projectid: ""
    provider: openai
    temperature: 0.7
project:
    currenttaskid: 6884a8f8-4775-4bb4-9dd1-051cddc3d57f
    outputlogpath: logs/taskwing.log
    rootdir: .taskwing
    tasksdir: tasks
    templatesdir: templates
verbose: false
</file>

<file path="public/vite.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="31.88" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 257"><defs><linearGradient id="IconifyId1813088fe1fbc01fb466" x1="-.828%" x2="57.636%" y1="7.652%" y2="78.411%"><stop offset="0%" stop-color="#41D1FF"></stop><stop offset="100%" stop-color="#BD34FE"></stop></linearGradient><linearGradient id="IconifyId1813088fe1fbc01fb467" x1="43.376%" x2="50.316%" y1="2.242%" y2="89.03%"><stop offset="0%" stop-color="#FFEA83"></stop><stop offset="8.333%" stop-color="#FFDD35"></stop><stop offset="100%" stop-color="#FFA800"></stop></linearGradient></defs><path fill="url(#IconifyId1813088fe1fbc01fb466)" d="M255.153 37.938L134.897 252.976c-2.483 4.44-8.862 4.466-11.382.048L.875 37.958c-2.746-4.814 1.371-10.646 6.827-9.67l120.385 21.517a6.537 6.537 0 0 0 2.322-.004l117.867-21.483c5.438-.991 9.574 4.796 6.877 9.62Z"></path><path fill="url(#IconifyId1813088fe1fbc01fb467)" d="M185.432.063L96.44 17.501a3.268 3.268 0 0 0-2.634 3.014l-5.474 92.456a3.268 3.268 0 0 0 3.997 3.378l24.777-5.718c2.318-.535 4.413 1.507 3.936 3.838l-7.361 36.047c-.495 2.426 1.782 4.5 4.151 3.78l15.304-4.649c2.372-.72 4.652 1.36 4.15 3.788l-11.698 56.621c-.732 3.542 3.979 5.473 5.943 2.437l1.313-2.028l72.516-144.72c1.215-2.423-.88-5.186-3.54-4.672l-25.505 4.922c-2.396.462-4.435-1.77-3.759-4.114l16.646-57.705c.677-2.35-1.37-4.583-3.769-4.113Z"></path></svg>
</file>

<file path="src/assets/react.svg">
<svg xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" aria-hidden="true" role="img" class="iconify iconify--logos" width="35.93" height="32" preserveAspectRatio="xMidYMid meet" viewBox="0 0 256 228"><path fill="#00D8FF" d="M210.483 73.824a171.49 171.49 0 0 0-8.24-2.597c.465-1.9.893-3.777 1.273-5.621c6.238-30.281 2.16-54.676-11.769-62.708c-13.355-7.7-35.196.329-57.254 19.526a171.23 171.23 0 0 0-6.375 5.848a155.866 155.866 0 0 0-4.241-3.917C100.759 3.829 77.587-4.822 63.673 3.233C50.33 10.957 46.379 33.89 51.995 62.588a170.974 170.974 0 0 0 1.892 8.48c-3.28.932-6.445 1.924-9.474 2.98C17.309 83.498 0 98.307 0 113.668c0 15.865 18.582 31.778 46.812 41.427a145.52 145.52 0 0 0 6.921 2.165a167.467 167.467 0 0 0-2.01 9.138c-5.354 28.2-1.173 50.591 12.134 58.266c13.744 7.926 36.812-.22 59.273-19.855a145.567 145.567 0 0 0 5.342-4.923a168.064 168.064 0 0 0 6.92 6.314c21.758 18.722 43.246 26.282 56.54 18.586c13.731-7.949 18.194-32.003 12.4-61.268a145.016 145.016 0 0 0-1.535-6.842c1.62-.48 3.21-.974 4.76-1.488c29.348-9.723 48.443-25.443 48.443-41.52c0-15.417-17.868-30.326-45.517-39.844Zm-6.365 70.984c-1.4.463-2.836.91-4.3 1.345c-3.24-10.257-7.612-21.163-12.963-32.432c5.106-11 9.31-21.767 12.459-31.957c2.619.758 5.16 1.557 7.61 2.4c23.69 8.156 38.14 20.213 38.14 29.504c0 9.896-15.606 22.743-40.946 31.14Zm-10.514 20.834c2.562 12.94 2.927 24.64 1.23 33.787c-1.524 8.219-4.59 13.698-8.382 15.893c-8.067 4.67-25.32-1.4-43.927-17.412a156.726 156.726 0 0 1-6.437-5.87c7.214-7.889 14.423-17.06 21.459-27.246c12.376-1.098 24.068-2.894 34.671-5.345a134.17 134.17 0 0 1 1.386 6.193ZM87.276 214.515c-7.882 2.783-14.16 2.863-17.955.675c-8.075-4.657-11.432-22.636-6.853-46.752a156.923 156.923 0 0 1 1.869-8.499c10.486 2.32 22.093 3.988 34.498 4.994c7.084 9.967 14.501 19.128 21.976 27.15a134.668 134.668 0 0 1-4.877 4.492c-9.933 8.682-19.886 14.842-28.658 17.94ZM50.35 144.747c-12.483-4.267-22.792-9.812-29.858-15.863c-6.35-5.437-9.555-10.836-9.555-15.216c0-9.322 13.897-21.212 37.076-29.293c2.813-.98 5.757-1.905 8.812-2.773c3.204 10.42 7.406 21.315 12.477 32.332c-5.137 11.18-9.399 22.249-12.634 32.792a134.718 134.718 0 0 1-6.318-1.979Zm12.378-84.26c-4.811-24.587-1.616-43.134 6.425-47.789c8.564-4.958 27.502 2.111 47.463 19.835a144.318 144.318 0 0 1 3.841 3.545c-7.438 7.987-14.787 17.08-21.808 26.988c-12.04 1.116-23.565 2.908-34.161 5.309a160.342 160.342 0 0 1-1.76-7.887Zm110.427 27.268a347.8 347.8 0 0 0-7.785-12.803c8.168 1.033 15.994 2.404 23.343 4.08c-2.206 7.072-4.956 14.465-8.193 22.045a381.151 381.151 0 0 0-7.365-13.322Zm-45.032-43.861c5.044 5.465 10.096 11.566 15.065 18.186a322.04 322.04 0 0 0-30.257-.006c4.974-6.559 10.069-12.652 15.192-18.18ZM82.802 87.83a323.167 323.167 0 0 0-7.227 13.238c-3.184-7.553-5.909-14.98-8.134-22.152c7.304-1.634 15.093-2.97 23.209-3.984a321.524 321.524 0 0 0-7.848 12.897Zm8.081 65.352c-8.385-.936-16.291-2.203-23.593-3.793c2.26-7.3 5.045-14.885 8.298-22.6a321.187 321.187 0 0 0 7.257 13.246c2.594 4.48 5.28 8.868 8.038 13.147Zm37.542 31.03c-5.184-5.592-10.354-11.779-15.403-18.433c4.902.192 9.899.29 14.978.29c5.218 0 10.376-.117 15.453-.343c-4.985 6.774-10.018 12.97-15.028 18.486Zm52.198-57.817c3.422 7.8 6.306 15.345 8.596 22.52c-7.422 1.694-15.436 3.058-23.88 4.071a382.417 382.417 0 0 0 7.859-13.026a347.403 347.403 0 0 0 7.425-13.565Zm-16.898 8.101a358.557 358.557 0 0 1-12.281 19.815a329.4 329.4 0 0 1-23.444.823c-7.967 0-15.716-.248-23.178-.732a310.202 310.202 0 0 1-12.513-19.846h.001a307.41 307.41 0 0 1-10.923-20.627a310.278 310.278 0 0 1 10.89-20.637l-.001.001a307.318 307.318 0 0 1 12.413-19.761c7.613-.576 15.42-.876 23.31-.876H128c7.926 0 15.743.303 23.354.883a329.357 329.357 0 0 1 12.335 19.695a358.489 358.489 0 0 1 11.036 20.54a329.472 329.472 0 0 1-11 20.722Zm22.56-122.124c8.572 4.944 11.906 24.881 6.52 51.026c-.344 1.668-.73 3.367-1.15 5.09c-10.622-2.452-22.155-4.275-34.23-5.408c-7.034-10.017-14.323-19.124-21.64-27.008a160.789 160.789 0 0 1 5.888-5.4c18.9-16.447 36.564-22.941 44.612-18.3ZM128 90.808c12.625 0 22.86 10.235 22.86 22.86s-10.235 22.86-22.86 22.86s-22.86-10.235-22.86-22.86s10.235-22.86 22.86-22.86Z"></path></svg>
</file>

<file path="src/components/CookieConsent.css">
.cookie-consent {
  position: fixed;
  bottom: 0;
  left: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.98);
  backdrop-filter: blur(10px);
  border-top: 1px solid #e0e0e0;
  box-shadow: 0 -4px 20px rgba(0, 0, 0, 0.1);
  z-index: 10000;
  animation: slideUp 0.3s ease-out;
}

@keyframes slideUp {
  from {
    transform: translateY(100%);
    opacity: 0;
  }
  to {
    transform: translateY(0);
    opacity: 1;
  }
}

.cookie-consent-content {
  max-width: 1200px;
  margin: 0 auto;
  padding: 20px;
}

.cookie-consent-main h3 {
  margin: 0 0 12px 0;
  font-size: 18px;
  font-weight: 600;
  color: #333;
  display: flex;
  align-items: center;
  gap: 8px;
}

.cookie-consent-main p {
  margin: 0 0 16px 0;
  color: #666;
  line-height: 1.5;
  font-size: 14px;
}

.cookie-consent-actions {
  display: flex;
  gap: 12px;
  flex-wrap: wrap;
  align-items: center;
  justify-content: flex-start;
}

.cookie-consent-links {
  margin-top: 16px;
  padding-top: 16px;
  border-top: 1px solid #f0f0f0;
  display: flex;
  gap: 16px;
  flex-wrap: wrap;
}

.cookie-consent-links a {
  color: #666;
  text-decoration: none;
  font-size: 12px;
  transition: color 0.2s;
}

.cookie-consent-links a:hover {
  color: #333;
  text-decoration: underline;
}

/* Button styles */
.btn {
  padding: 10px 16px;
  border: none;
  border-radius: 6px;
  font-size: 14px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s;
  text-decoration: none;
  display: inline-flex;
  align-items: center;
  justify-content: center;
  min-height: 40px;
}

.btn-primary {
  background: #007bff;
  color: white;
}

.btn-primary:hover {
  background: #0056b3;
}

.btn-secondary {
  background: #6c757d;
  color: white;
}

.btn-secondary:hover {
  background: #545b62;
}

.btn-outline {
  background: transparent;
  color: #333;
  border: 1px solid #ddd;
}

.btn-outline:hover {
  background: #f8f9fa;
  border-color: #bbb;
}

/* Cookie details */
.cookie-details {
  margin: 16px 0;
  padding: 16px;
  background: #f8f9fa;
  border-radius: 8px;
  border: 1px solid #e9ecef;
}

.cookie-details h4 {
  margin: 0 0 16px 0;
  font-size: 16px;
  font-weight: 600;
  color: #333;
}

.cookie-category {
  margin-bottom: 16px;
  padding-bottom: 16px;
  border-bottom: 1px solid #e9ecef;
}

.cookie-category:last-of-type {
  border-bottom: none;
  margin-bottom: 20px;
}

.cookie-category-header {
  margin-bottom: 8px;
}

.cookie-category-header label {
  display: flex;
  align-items: flex-start;
  gap: 12px;
  cursor: pointer;
}

.cookie-category-header input[type="checkbox"] {
  margin: 0;
  width: 18px;
  height: 18px;
  accent-color: #007bff;
  flex-shrink: 0;
  margin-top: 1px;
}

.cookie-category-header input[type="checkbox"]:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

.checkbox-label {
  display: flex;
  flex-direction: column;
  gap: 4px;
}

.checkbox-label strong {
  color: #333;
  font-weight: 600;
}

.required {
  color: #28a745;
  font-size: 12px;
  font-weight: 500;
  text-transform: uppercase;
}

.cookie-category p {
  margin: 0;
  color: #666;
  font-size: 13px;
  line-height: 1.4;
  margin-left: 30px;
}

.save-preferences {
  width: 100%;
  margin-top: 8px;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  .cookie-consent {
    background: rgba(40, 40, 40, 0.98);
    border-top-color: #555;
  }
  
  .cookie-consent-main h3,
  .cookie-details h4,
  .checkbox-label strong {
    color: #fff;
  }
  
  .cookie-consent-main p,
  .cookie-category p {
    color: #ccc;
  }
  
  .cookie-consent-links a {
    color: #bbb;
  }
  
  .cookie-consent-links a:hover {
    color: #fff;
  }
  
  .cookie-details {
    background: #2a2a2a;
    border-color: #555;
  }
  
  .cookie-category {
    border-bottom-color: #555;
  }
  
  .cookie-consent-links {
    border-top-color: #555;
  }
  
  .btn-outline {
    color: #fff;
    border-color: #555;
  }
  
  .btn-outline:hover {
    background: #333;
    border-color: #777;
  }
}

/* Mobile responsive */
@media (max-width: 768px) {
  .cookie-consent-content {
    padding: 16px;
  }
  
  .cookie-consent-main h3 {
    font-size: 16px;
  }
  
  .cookie-consent-actions {
    flex-direction: row;
    justify-content: space-between;
    gap: 8px;
  }
  
  .btn {
    flex: 1;
    min-width: 0;
    font-size: 13px;
    padding: 8px 12px;
    justify-content: center;
  }
  
  .cookie-consent-links {
    justify-content: center;
  }
  
  .cookie-category p {
    margin-left: 0;
    margin-top: 8px;
  }
  
  .cookie-category-header label {
    align-items: flex-start;
  }
}

@media (max-width: 480px) {
  .cookie-consent-actions {
    flex-direction: column;
    gap: 10px;
  }
  
  .btn {
    width: 100%;
    font-size: 14px;
    padding: 10px 16px;
  }
}

/* Reduced motion */
@media (prefers-reduced-motion: reduce) {
  .cookie-consent {
    animation: none;
  }
  
  .btn {
    transition: none;
  }
}
</file>

<file path="src/components/CookieConsent.tsx">
import { useState, useEffect } from 'react'
import { analytics } from '../utils/analytics'
import './CookieConsent.css'

export function CookieConsent() {
  const [isVisible, setIsVisible] = useState(false)
  const [showDetails, setShowDetails] = useState(false)

  useEffect(() => {
    // Check if user has already made a choice
    const consent = localStorage.getItem('cookie_consent')
    if (!consent) {
      setIsVisible(true)
    } else {
      // Apply stored consent preference
      const consentData = JSON.parse(consent)
      analytics.setConsent(consentData.analytics)
    }
  }, [])

  const handleAcceptAll = () => {
    const consent = {
      analytics: true,
      marketing: true,
      functional: true,
      timestamp: Date.now()
    }
    
    localStorage.setItem('cookie_consent', JSON.stringify(consent))
    analytics.setConsent(true)
    setIsVisible(false)
  }

  const handleRejectAll = () => {
    const consent = {
      analytics: false,
      marketing: false,
      functional: true, // Essential cookies always allowed
      timestamp: Date.now()
    }
    
    localStorage.setItem('cookie_consent', JSON.stringify(consent))
    analytics.setConsent(false)
    setIsVisible(false)
  }

  const handleCustomize = () => {
    setShowDetails(!showDetails)
  }

  const handleSavePreferences = (preferences: Record<string, boolean>) => {
    const consent = {
      ...preferences,
      functional: true, // Essential cookies always required
      timestamp: Date.now()
    }
    
    localStorage.setItem('cookie_consent', JSON.stringify(consent))
    analytics.setConsent(preferences.analytics || false)
    setIsVisible(false)
  }

  if (!isVisible) return null

  return (
    <div className="cookie-consent">
      <div className="cookie-consent-content">
        <div className="cookie-consent-main">
          <h3>🍪 We use cookies</h3>
          <p>
            We use cookies to enhance your experience, analyze site traffic, and for marketing purposes. 
            By clicking "Accept All", you consent to our use of cookies.
          </p>
          
          {showDetails && (
            <CookieDetails onSave={handleSavePreferences} />
          )}
          
          <div className="cookie-consent-actions">
            <button 
              className="btn btn-secondary"
              onClick={handleRejectAll}
            >
              Reject All
            </button>
            <button 
              className="btn btn-outline"
              onClick={handleCustomize}
            >
              {showDetails ? 'Hide Details' : 'Customize'}
            </button>
            <button 
              className="btn btn-primary"
              onClick={handleAcceptAll}
            >
              Accept All
            </button>
          </div>
        </div>
        
        <div className="cookie-consent-links">
          <a href="/privacy" target="_blank" rel="noopener noreferrer">
            Privacy Policy
          </a>
          <a href="/cookies" target="_blank" rel="noopener noreferrer">
            Cookie Policy
          </a>
        </div>
      </div>
    </div>
  )
}

interface CookieDetailsProps {
  onSave: (preferences: Record<string, boolean>) => void
}

function CookieDetails({ onSave }: CookieDetailsProps) {
  const [preferences, setPreferences] = useState({
    analytics: false,
    marketing: false,
    functional: true
  })

  const handleToggle = (type: keyof typeof preferences) => {
    if (type === 'functional') return // Can't disable essential cookies
    
    setPreferences(prev => ({
      ...prev,
      [type]: !prev[type]
    }))
  }

  const handleSave = () => {
    onSave(preferences)
  }

  return (
    <div className="cookie-details">
      <h4>Cookie Preferences</h4>
      
      <div className="cookie-category">
        <div className="cookie-category-header">
          <label>
            <input
              type="checkbox"
              checked={preferences.functional}
              disabled
              onChange={() => {}}
            />
            <span className="checkbox-label">
              <strong>Essential Cookies</strong>
              <span className="required">Required</span>
            </span>
          </label>
        </div>
        <p>These cookies are necessary for the website to function and cannot be disabled.</p>
      </div>

      <div className="cookie-category">
        <div className="cookie-category-header">
          <label>
            <input
              type="checkbox"
              checked={preferences.analytics}
              onChange={() => handleToggle('analytics')}
            />
            <span className="checkbox-label">
              <strong>Analytics Cookies</strong>
            </span>
          </label>
        </div>
        <p>These cookies help us understand how visitors interact with our website by collecting and reporting information anonymously.</p>
      </div>

      <div className="cookie-category">
        <div className="cookie-category-header">
          <label>
            <input
              type="checkbox"
              checked={preferences.marketing}
              onChange={() => handleToggle('marketing')}
            />
            <span className="checkbox-label">
              <strong>Marketing Cookies</strong>
            </span>
          </label>
        </div>
        <p>These cookies are used to track visitors across websites for marketing and advertising purposes.</p>
      </div>

      <button className="btn btn-primary save-preferences" onClick={handleSave}>
        Save Preferences
      </button>
    </div>
  )
}
</file>

<file path="src/components/FAQSection.css">
.faq-section {
  padding: 6rem 0;
  background: #ffffff;
  position: relative;
}

.faq-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: 
    radial-gradient(circle at 20% 20%, rgba(59, 130, 246, 0.03) 0%, transparent 50%),
    radial-gradient(circle at 80% 80%, rgba(168, 85, 247, 0.03) 0%, transparent 50%);
  pointer-events: none;
}

.faq-section .container {
  position: relative;
  z-index: 1;
}

/* Header */
.faq-header {
  text-align: center;
  margin-bottom: 3rem;
}

.faq-header .section-title {
  font-size: 2.5rem;
  font-weight: 700;
  color: #1e293b;
  margin-bottom: 1rem;
}

.faq-subtitle {
  font-size: 1.125rem;
  color: #64748b;
  max-width: 600px;
  margin: 0 auto;
  line-height: 1.6;
}

.faq-subtitle a {
  color: #3b82f6;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease;
}

.faq-subtitle a:hover {
  color: #2563eb;
  text-decoration: underline;
}

/* Controls */
.faq-controls {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  gap: 1rem;
}

.search-box {
  flex: 1;
  max-width: 400px;
}

.search-input-wrapper {
  position: relative;
  display: flex;
  align-items: center;
}

.search-icon {
  position: absolute;
  left: 1rem;
  color: #94a3b8;
  pointer-events: none;
  z-index: 1;
}

.search-input {
  width: 100%;
  padding: 0.75rem 1rem 0.75rem 2.5rem;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-size: 1rem;
  background: #ffffff;
  transition: all 0.2s ease;
}

.search-input:focus {
  outline: none;
  border-color: #3b82f6;
  box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1);
}

.clear-search {
  position: absolute;
  right: 0.75rem;
  background: none;
  border: none;
  color: #94a3b8;
  cursor: pointer;
  padding: 0.25rem;
  border-radius: 4px;
  transition: color 0.2s ease;
}

.clear-search:hover {
  color: #64748b;
}

.expand-controls {
  display: flex;
  gap: 0.5rem;
}

.expand-btn {
  padding: 0.5rem 1rem;
  background: #f8fafc;
  border: 1px solid #e2e8f0;
  border-radius: 8px;
  font-size: 0.875rem;
  font-weight: 500;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
}

.expand-btn:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
  color: #475569;
}

/* Category Filters */
.category-filters {
  display: flex;
  gap: 0.75rem;
  margin-bottom: 2rem;
  overflow-x: auto;
  padding-bottom: 0.5rem;
}

.category-filter {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  padding: 0.75rem 1rem;
  background: #f8fafc;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  font-size: 0.875rem;
  font-weight: 500;
  color: #64748b;
  cursor: pointer;
  transition: all 0.2s ease;
  white-space: nowrap;
  flex-shrink: 0;
}

.category-filter:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
  color: #475569;
}

.category-filter.active {
  background: linear-gradient(135deg, #3b82f6, #8b5cf6);
  color: white;
  border-color: transparent;
}

.category-icon {
  font-size: 1rem;
}

.category-name {
  font-weight: 500;
}

/* Results Info */
.faq-results-info {
  margin-bottom: 1.5rem;
  text-align: center;
}

.results-count {
  color: #64748b;
  font-size: 0.875rem;
  font-weight: 500;
}

/* FAQ List */
.faq-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 3rem;
}

.faq-item {
  background: #ffffff;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  overflow: hidden;
  transition: all 0.2s ease;
}

.faq-item:hover {
  border-color: #cbd5e1;
  box-shadow: 0 4px 12px rgba(0, 0, 0, 0.05);
}

.faq-item.expanded {
  border-color: #3b82f6;
  box-shadow: 0 4px 20px rgba(59, 130, 246, 0.1);
}

.faq-question {
  width: 100%;
  padding: 1.5rem;
  background: none;
  border: none;
  text-align: left;
  cursor: pointer;
  display: flex;
  justify-content: space-between;
  align-items: center;
  gap: 1rem;
  transition: background-color 0.2s ease;
}

.faq-question:hover {
  background: #f8fafc;
}

.faq-item.expanded .faq-question {
  background: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
}

.question-text {
  font-size: 1.125rem;
  font-weight: 600;
  color: #1e293b;
  line-height: 1.5;
}

.expand-icon {
  font-size: 1.25rem;
  font-weight: 600;
  color: #64748b;
  background: #f1f5f9;
  width: 32px;
  height: 32px;
  border-radius: 50%;
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
  transition: all 0.2s ease;
}

.faq-item.expanded .expand-icon {
  background: #3b82f6;
  color: white;
  transform: rotate(0deg);
}

.faq-answer {
  max-height: 0;
  overflow: hidden;
  transition: max-height 0.3s ease-out;
}

.faq-item.expanded .faq-answer {
  max-height: 1000px;
  transition: max-height 0.3s ease-in;
}

.answer-content {
  padding: 1.5rem;
  color: #374151;
  line-height: 1.7;
}

.answer-content p {
  margin: 0 0 1rem 0;
}

.answer-content p:last-child {
  margin-bottom: 0;
}

.answer-content strong {
  color: #1e293b;
  font-weight: 600;
}

.answer-content code {
  background: #f1f5f9;
  color: #1e40af;
  padding: 0.125rem 0.375rem;
  border-radius: 4px;
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  font-size: 0.875rem;
}

.answer-content ul {
  margin: 1rem 0;
  padding-left: 0;
  list-style: none;
}

.answer-content li {
  margin: 0.5rem 0;
  padding-left: 1.5rem;
  position: relative;
}

.answer-content li::before {
  content: '•';
  color: #3b82f6;
  font-weight: bold;
  position: absolute;
  left: 0;
}

.answer-content a {
  color: #3b82f6;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease;
}

.answer-content a:hover {
  color: #2563eb;
  text-decoration: underline;
}

/* No Results */
.no-results {
  text-align: center;
  padding: 3rem 1rem;
  color: #64748b;
}

.no-results-icon {
  font-size: 3rem;
  margin-bottom: 1rem;
  display: block;
}

.no-results h3 {
  margin: 0 0 0.5rem 0;
  color: #374151;
  font-size: 1.25rem;
}

.no-results p {
  margin: 0;
  font-size: 1rem;
}

.reset-filters {
  background: none;
  border: none;
  color: #3b82f6;
  cursor: pointer;
  font-weight: 500;
  text-decoration: underline;
  margin-left: 0.25rem;
}

.reset-filters:hover {
  color: #2563eb;
}

/* Help Section */
.faq-help {
  text-align: center;
  padding: 2rem;
  background: #f8fafc;
  border-radius: 16px;
  border: 1px solid #e2e8f0;
}

.faq-help h3 {
  margin: 0 0 1.5rem 0;
  color: #1e293b;
  font-size: 1.25rem;
  font-weight: 600;
}

.help-options {
  display: flex;
  justify-content: center;
  gap: 1.5rem;
  flex-wrap: wrap;
}

.help-option {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  padding: 1rem;
  background: white;
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  text-decoration: none;
  color: #64748b;
  font-weight: 500;
  font-size: 0.875rem;
  transition: all 0.2s ease;
  min-width: 120px;
}

.help-option:hover {
  border-color: #3b82f6;
  color: #3b82f6;
  transform: translateY(-2px);
  box-shadow: 0 4px 12px rgba(59, 130, 246, 0.15);
}

.help-icon {
  font-size: 1.5rem;
}

.help-text {
  text-align: center;
  line-height: 1.3;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .faq-section {
    padding: 4rem 0;
  }

  .faq-header .section-title {
    font-size: 2rem;
  }

  .faq-subtitle {
    font-size: 1rem;
  }

  .faq-controls {
    flex-direction: column;
    align-items: stretch;
    gap: 1rem;
  }

  .search-box {
    max-width: none;
  }

  .expand-controls {
    justify-content: center;
  }

  .category-filters {
    justify-content: flex-start;
    gap: 0.5rem;
  }

  .category-filter {
    padding: 0.5rem 0.75rem;
    font-size: 0.8rem;
  }

  .faq-question {
    padding: 1rem;
  }

  .question-text {
    font-size: 1rem;
  }

  .answer-content {
    padding: 1rem;
  }

  .help-options {
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }

  .help-option {
    width: 100%;
    max-width: 200px;
  }
}

@media (max-width: 480px) {
  .faq-controls {
    gap: 0.75rem;
  }

  .expand-controls {
    flex-direction: column;
  }

  .expand-btn {
    width: 100%;
  }

  .category-filters {
    gap: 0.25rem;
  }

  .category-filter {
    padding: 0.5rem;
    min-width: auto;
  }

  .category-name {
    display: none;
  }

  .faq-question {
    padding: 0.75rem;
  }

  .question-text {
    font-size: 0.95rem;
  }

  .answer-content {
    padding: 0.75rem;
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .faq-item,
  .faq-question,
  .faq-answer,
  .expand-icon,
  .help-option {
    transition: none;
  }
  
  .help-option:hover {
    transform: none;
  }
}

/* Focus styles for keyboard navigation */
.faq-question:focus {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

.search-input:focus,
.category-filter:focus,
.expand-btn:focus,
.help-option:focus {
  outline: 2px solid #3b82f6;
  outline-offset: 2px;
}

/* High contrast mode */
@media (prefers-contrast: high) {
  .faq-item {
    border: 2px solid #000000;
  }
  
  .faq-item.expanded {
    border-color: #0000ff;
  }
  
  .category-filter.active {
    background: #000000;
    color: #ffffff;
  }
}
</file>

<file path="src/components/FAQSection.tsx">
import { useState, useMemo } from 'react'
import './FAQSection.css'

interface FAQ {
  id: string
  question: string
  answer: string
  category: string
  keywords: string[]
}

interface FAQCategory {
  id: string
  name: string
  icon: string
  description: string
}

const categories: FAQCategory[] = [
  {
    id: 'installation',
    name: 'Installation',
    icon: '⚙️',
    description: 'Getting TaskWing installed and set up'
  },
  {
    id: 'usage',
    name: 'Usage',
    icon: '🚀',
    description: 'How to use TaskWing effectively'
  },
  {
    id: 'mcp',
    name: 'MCP Integration',
    icon: '🤖',
    description: 'Model Context Protocol features'
  },
  {
    id: 'troubleshooting',
    name: 'Troubleshooting',
    icon: '🔧',
    description: 'Common issues and solutions'
  },
  {
    id: 'advanced',
    name: 'Advanced',
    icon: '⚡',
    description: 'Advanced features and configuration'
  }
]

const faqs: FAQ[] = [
  {
    id: '1',
    question: 'What is TaskWing and how is it different from other task managers?',
    answer: 'TaskWing is a CLI-native task manager specifically designed for developers, with built-in AI integration through Model Context Protocol (MCP). Unlike traditional task managers, TaskWing integrates directly into your development workflow, supports complex dependency tracking, and allows AI tools to interact with your tasks for intelligent assistance with planning, breakdown, and management.',
    category: 'usage',
    keywords: ['taskwing', 'CLI', 'developers', 'AI', 'MCP', 'workflow']
  },
  {
    id: '2',
    question: 'How do I install TaskWing?',
    answer: 'TaskWing can be installed in several ways:\n\n**Go Install (Recommended):**\n```\ngo install github.com/josephgoksu/TaskWing@latest\n```\n\n**Homebrew:**\n```\nbrew tap taskwing/taskwing\nbrew install taskwing\n```\n\n**Binary Download:**\nDownload pre-built binaries from our [GitHub releases](https://github.com/josephgoksu/TaskWing/releases)\n\n**Build from Source:**\n```\ngit clone https://github.com/josephgoksu/TaskWing.git\ncd TaskWing\ngo build -o taskwing main.go\n```',
    category: 'installation',
    keywords: ['install', 'go', 'homebrew', 'binary', 'build', 'setup']
  },
  {
    id: '3',
    question: 'What is Model Context Protocol (MCP) and why should I care?',
    answer: 'Model Context Protocol (MCP) is a standardized way for AI tools to interact with external systems and data. TaskWing implements MCP with 12 specialized tools that enable AI assistants to:\n\n• Create and manage tasks intelligently\n• Break down complex projects into manageable tasks\n• Analyze task dependencies and suggest optimizations\n• Provide context-aware project insights\n• Automate routine task management operations\n\nThis means your AI tools can understand your project state and help with planning and execution.',
    category: 'mcp',
    keywords: ['MCP', 'AI', 'protocol', 'tools', 'automation', 'planning']
  },
  {
    id: '4',
    question: 'How do I get started after installation?',
    answer: 'After installing TaskWing, follow these steps:\n\n1. **Initialize your project:**\n   ```\n   cd your-project\n   taskwing init\n   ```\n\n2. **Create your first task:**\n   ```\n   taskwing add "Set up project structure"\n   ```\n\n3. **List your tasks:**\n   ```\n   taskwing list\n   ```\n\n4. **Start the MCP server for AI integration:**\n   ```\n   taskwing mcp\n   ```\n\n5. **Mark tasks as complete:**\n   ```\n   taskwing done <task-id>\n   ```',
    category: 'usage',
    keywords: ['getting started', 'init', 'first task', 'commands', 'workflow']
  },
  {
    id: '5',
    question: 'Can I use TaskWing with my existing project management tools?',
    answer: 'Yes! TaskWing is designed to complement your existing tools rather than replace them. You can:\n\n• Export tasks to various formats (JSON, CSV, Markdown)\n• Use TaskWing for local development task tracking while syncing higher-level planning with tools like Jira or Linear\n• Integrate TaskWing data with CI/CD pipelines\n• Use the MCP integration to have AI tools analyze your TaskWing data alongside other project information\n\nTaskWing excels at developer-focused, granular task management that larger tools often miss.',
    category: 'usage',
    keywords: ['integration', 'export', 'existing tools', 'jira', 'linear', 'workflow']
  },
  {
    id: '6',
    question: 'How does dependency tracking work?',
    answer: 'TaskWing includes intelligent dependency tracking with automatic circular dependency detection:\n\n• **Set dependencies:** Tasks can depend on one or more other tasks\n• **Automatic validation:** Prevents circular dependencies that would create deadlocks\n• **Visual indicators:** See dependency chains and blocking relationships\n• **Smart ordering:** List and filter tasks based on dependency order\n• **Dependency completion:** Track which dependencies are holding up progress\n\nExample:\n```\ntaskwing add "Deploy to production" --depends-on "run-tests,code-review"\n```',
    category: 'advanced',
    keywords: ['dependencies', 'blocking', 'circular', 'validation', 'tracking']
  },
  {
    id: '7',
    question: 'What should I do if TaskWing is not working or I encounter errors?',
    answer: 'Here are common troubleshooting steps:\n\n**1. Check installation:**\n```\ntaskwing --version\n```\n\n**2. Verify Go version (1.19+ required):**\n```\ngo version\n```\n\n**3. Clear corrupted data:**\n```\nrm -rf .taskwing\ntaskwing init\n```\n\n**4. Check permissions:**\nEnsure TaskWing can write to your project directory\n\n**5. Update to latest version:**\n```\ngo install github.com/josephgoksu/TaskWing@latest\n```\n\n**Still having issues?** Open an issue on [GitHub](https://github.com/josephgoksu/TaskWing/issues) with:\n• Your OS and Go version\n• TaskWing version\n• Complete error message\n• Steps to reproduce',
    category: 'troubleshooting',
    keywords: ['errors', 'troubleshooting', 'not working', 'fix', 'debug', 'issues']
  },
  {
    id: '8',
    question: 'How do I configure TaskWing for my team or project?',
    answer: 'TaskWing supports flexible configuration at multiple levels:\n\n**Project-level (.taskwing/.taskwing.yaml):**\n```yaml\nproject:\n  name: "My Project"\n  rootDir: ".taskwing"\ndata:\n  format: "json"  # or yaml, toml\n```\n\n**User-level (~/.taskwing.yaml):**\nSet personal defaults for all projects\n\n**Environment variables:**\n```\nTASKWING_PROJECT_NAME="My Project"\nTASKWING_DATA_FORMAT="yaml"\n```\n\n**Team sharing:** Commit `.taskwing.yaml` to version control for team-wide settings while keeping task data local or shared as needed.',
    category: 'advanced',
    keywords: ['configuration', 'team', 'yaml', 'environment', 'settings', 'customize']
  },
  {
    id: '9',
    question: 'Can I use TaskWing with AI assistants like Claude or ChatGPT?',
    answer: 'Absolutely! TaskWing is designed for AI integration:\n\n**MCP Server Mode:**\n```\ntaskwing mcp\n```\nThis starts a server that AI tools can connect to for direct task manipulation.\n\n**Supported AI Tools:**\n• Claude (with MCP support)\n• Any MCP-compatible AI assistant\n• Custom integrations via the MCP protocol\n\n**AI Capabilities:**\n• Task creation and breakdown\n• Project analysis and insights\n• Dependency optimization\n• Progress tracking and reporting\n• Automated task management\n\nThe AI can read your current tasks, understand project context, and help with planning and execution.',
    category: 'mcp',
    keywords: ['AI', 'Claude', 'ChatGPT', 'assistant', 'MCP server', 'integration']
  },
  {
    id: '10',
    question: 'Is TaskWing free? What\'s the licensing?',
    answer: 'TaskWing is **completely free and open source** under the MIT License. This means:\n\n• ✅ **Free for personal use**\n• ✅ **Free for commercial use**\n• ✅ **No subscription fees**\n• ✅ **No usage limits**\n• ✅ **Full source code available**\n• ✅ **Can be modified and redistributed**\n\n**Support the project:**\n• ⭐ Star us on [GitHub](https://github.com/josephgoksu/TaskWing)\n• 🐛 Report bugs and request features\n• 🤝 Contribute code or documentation\n• 💬 Help other users in discussions\n\nWe believe great developer tools should be accessible to everyone.',
    category: 'usage',
    keywords: ['free', 'open source', 'MIT', 'license', 'cost', 'pricing', 'commercial']
  }
]

export function FAQSection() {
  const [searchTerm, setSearchTerm] = useState('')
  const [selectedCategory, setSelectedCategory] = useState('all')
  const [expandedFAQs, setExpandedFAQs] = useState<Set<string>>(new Set())

  // Filter FAQs based on search and category
  const filteredFAQs = useMemo(() => {
    return faqs.filter(faq => {
      const matchesCategory = selectedCategory === 'all' || faq.category === selectedCategory
      const matchesSearch = searchTerm === '' || 
        faq.question.toLowerCase().includes(searchTerm.toLowerCase()) ||
        faq.answer.toLowerCase().includes(searchTerm.toLowerCase()) ||
        faq.keywords.some(keyword => keyword.toLowerCase().includes(searchTerm.toLowerCase()))
      
      return matchesCategory && matchesSearch
    })
  }, [searchTerm, selectedCategory])

  const toggleFAQ = (id: string) => {
    const newExpanded = new Set(expandedFAQs)
    if (newExpanded.has(id)) {
      newExpanded.delete(id)
    } else {
      newExpanded.add(id)
    }
    setExpandedFAQs(newExpanded)
  }

  const expandAll = () => {
    setExpandedFAQs(new Set(filteredFAQs.map(faq => faq.id)))
  }

  const collapseAll = () => {
    setExpandedFAQs(new Set())
  }

  const formatAnswer = (answer: string) => {
    // Convert markdown-like formatting to HTML
    return answer
      .split('\n')
      .map((line, index) => {
        // Handle code blocks
        if (line.startsWith('```')) {
          return null // Skip markdown code block delimiters
        }
        
        // Handle bold text
        line = line.replace(/\*\*(.*?)\*\*/g, '<strong>$1</strong>')
        
        // Handle code inline
        line = line.replace(/`([^`]+)`/g, '<code>$1</code>')
        
        // Handle bullet points
        if (line.startsWith('•')) {
          return <li key={index} dangerouslySetInnerHTML={{ __html: line.substring(1).trim() }} />
        }
        
        // Handle empty lines
        if (line.trim() === '') {
          return <br key={index} />
        }
        
        // Regular paragraphs
        return <p key={index} dangerouslySetInnerHTML={{ __html: line }} />
      })
      .filter(Boolean)
  }

  return (
    <section className="faq-section" id="faq">
      <div className="container">
        <div className="faq-header">
          <h2 className="section-title">Frequently Asked Questions</h2>
          <p className="faq-subtitle">
            Everything you need to know about TaskWing. Can't find what you're looking for? 
            <a href="https://github.com/josephgoksu/TaskWing/discussions" target="_blank" rel="noopener noreferrer">
              Ask in our community discussions
            </a>.
          </p>
        </div>

        {/* Search and Controls */}
        <div className="faq-controls">
          <div className="search-box">
            <div className="search-input-wrapper">
              <span className="search-icon">🔍</span>
              <input
                type="text"
                placeholder="Search FAQs..."
                value={searchTerm}
                onChange={(e) => setSearchTerm(e.target.value)}
                className="search-input"
              />
              {searchTerm && (
                <button 
                  className="clear-search"
                  onClick={() => setSearchTerm('')}
                  aria-label="Clear search"
                >
                  ✕
                </button>
              )}
            </div>
          </div>
          
          <div className="expand-controls">
            <button className="expand-btn" onClick={expandAll}>
              Expand All
            </button>
            <button className="expand-btn" onClick={collapseAll}>
              Collapse All
            </button>
          </div>
        </div>

        {/* Category Filter */}
        <div className="category-filters">
          <button
            className={`category-filter ${selectedCategory === 'all' ? 'active' : ''}`}
            onClick={() => setSelectedCategory('all')}
          >
            <span className="category-icon">📋</span>
            <span className="category-name">All</span>
          </button>
          
          {categories.map(category => (
            <button
              key={category.id}
              className={`category-filter ${selectedCategory === category.id ? 'active' : ''}`}
              onClick={() => setSelectedCategory(category.id)}
              title={category.description}
            >
              <span className="category-icon">{category.icon}</span>
              <span className="category-name">{category.name}</span>
            </button>
          ))}
        </div>

        {/* FAQ Results Info */}
        <div className="faq-results-info">
          <span className="results-count">
            {filteredFAQs.length} {filteredFAQs.length === 1 ? 'question' : 'questions'}
            {searchTerm && ` matching "${searchTerm}"`}
            {selectedCategory !== 'all' && ` in ${categories.find(c => c.id === selectedCategory)?.name}`}
          </span>
        </div>

        {/* FAQ List */}
        <div className="faq-list">
          {filteredFAQs.length === 0 ? (
            <div className="no-results">
              <span className="no-results-icon">🤔</span>
              <h3>No questions found</h3>
              <p>
                Try adjusting your search terms or 
                <button 
                  className="reset-filters"
                  onClick={() => {
                    setSearchTerm('')
                    setSelectedCategory('all')
                  }}
                >
                  reset filters
                </button>
              </p>
            </div>
          ) : (
            filteredFAQs.map(faq => (
              <div key={faq.id} className={`faq-item ${expandedFAQs.has(faq.id) ? 'expanded' : ''}`}>
                <button
                  className="faq-question"
                  onClick={() => toggleFAQ(faq.id)}
                  aria-expanded={expandedFAQs.has(faq.id)}
                  aria-controls={`faq-answer-${faq.id}`}
                >
                  <span className="question-text">{faq.question}</span>
                  <span className="expand-icon">
                    {expandedFAQs.has(faq.id) ? '−' : '+'}
                  </span>
                </button>
                
                <div 
                  id={`faq-answer-${faq.id}`}
                  className="faq-answer"
                  aria-hidden={!expandedFAQs.has(faq.id)}
                >
                  <div className="answer-content">
                    {formatAnswer(faq.answer)}
                  </div>
                </div>
              </div>
            ))
          )}
        </div>

        {/* Help Section */}
        <div className="faq-help">
          <h3>Still need help?</h3>
          <div className="help-options">
            <a 
              href="https://github.com/josephgoksu/TaskWing/discussions" 
              target="_blank" 
              rel="noopener noreferrer"
              className="help-option"
            >
              <span className="help-icon">💬</span>
              <span className="help-text">Community Discussions</span>
            </a>
            <a 
              href="https://github.com/josephgoksu/TaskWing/issues" 
              target="_blank" 
              rel="noopener noreferrer"
              className="help-option"
            >
              <span className="help-icon">🐛</span>
              <span className="help-text">Report an Issue</span>
            </a>
            <a 
              href="https://github.com/josephgoksu/TaskWing#documentation" 
              target="_blank" 
              rel="noopener noreferrer"
              className="help-option"
            >
              <span className="help-icon">📚</span>
              <span className="help-text">Documentation</span>
            </a>
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/InstallationWizard.css">
.installation-wizard {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  padding: 3rem 2rem;
  border-radius: 20px;
  margin: 2rem 0;
  position: relative;
  overflow: hidden;
}

.installation-wizard::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: 
    radial-gradient(circle at 20% 80%, rgba(255, 255, 255, 0.1) 0%, transparent 50%),
    radial-gradient(circle at 80% 20%, rgba(255, 255, 255, 0.1) 0%, transparent 50%);
  pointer-events: none;
}

.wizard-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  margin-bottom: 2rem;
  position: relative;
  z-index: 1;
}

.wizard-header h2 {
  margin: 0;
  font-size: 2rem;
  font-weight: 700;
}

.os-detection {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  background: rgba(255, 255, 255, 0.15);
  padding: 0.5rem 1rem;
  border-radius: 20px;
  backdrop-filter: blur(10px);
}

.os-icon {
  font-size: 1.25rem;
}

.os-name {
  font-size: 0.875rem;
  font-weight: 500;
}

/* Progress Steps */
.progress-steps {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 1rem;
  margin-bottom: 3rem;
  position: relative;
  z-index: 1;
}

.progress-step {
  display: flex;
  align-items: center;
  gap: 1rem;
  padding: 1rem;
  background: rgba(255, 255, 255, 0.1);
  border-radius: 12px;
  transition: all 0.3s ease;
  border: 2px solid transparent;
}

.progress-step.active {
  background: rgba(255, 255, 255, 0.2);
  border-color: rgba(255, 255, 255, 0.3);
}

.progress-step.current {
  background: rgba(255, 255, 255, 0.25);
  border-color: rgba(255, 255, 255, 0.5);
  transform: scale(1.02);
}

.step-indicator {
  position: relative;
  width: 48px;
  height: 48px;
  border-radius: 50%;
  background: rgba(255, 255, 255, 0.2);
  display: flex;
  align-items: center;
  justify-content: center;
  flex-shrink: 0;
}

.progress-step.active .step-indicator {
  background: rgba(255, 255, 255, 0.3);
}

.step-icon {
  font-size: 1.25rem;
}

.step-number {
  position: absolute;
  bottom: -2px;
  right: -2px;
  width: 20px;
  height: 20px;
  background: rgba(255, 255, 255, 0.9);
  color: #667eea;
  border-radius: 50%;
  font-size: 0.75rem;
  font-weight: 600;
  display: flex;
  align-items: center;
  justify-content: center;
}

.step-content {
  flex: 1;
  min-width: 0;
}

.step-title {
  font-weight: 600;
  margin-bottom: 0.25rem;
  font-size: 0.95rem;
}

.step-description {
  font-size: 0.8rem;
  opacity: 0.9;
  line-height: 1.3;
}

/* Wizard Content */
.wizard-content {
  background: rgba(255, 255, 255, 0.95);
  color: #1e293b;
  padding: 2rem;
  border-radius: 16px;
  margin-bottom: 2rem;
  position: relative;
  z-index: 1;
  backdrop-filter: blur(10px);
}

/* Method Selection */
.method-selection h3 {
  margin: 0 0 1.5rem 0;
  color: #1e293b;
  text-align: center;
}

.method-tabs {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(150px, 1fr));
  gap: 1rem;
  margin-bottom: 2rem;
}

.method-tab {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.5rem;
  padding: 1rem;
  background: #f8fafc;
  border: 2px solid #e2e8f0;
  border-radius: 12px;
  cursor: pointer;
  transition: all 0.3s ease;
  font-size: 0.875rem;
  font-weight: 500;
}

.method-tab:hover {
  background: #f1f5f9;
  border-color: #cbd5e1;
  transform: translateY(-2px);
}

.method-tab.active {
  background: linear-gradient(135deg, #667eea, #764ba2);
  color: white;
  border-color: transparent;
}

.method-icon {
  font-size: 1.5rem;
}

.method-name {
  text-align: center;
}

.method-details {
  background: #f8fafc;
  padding: 1.5rem;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
}

.method-info h4 {
  margin: 0 0 0.5rem 0;
  color: #1e293b;
}

.method-info p {
  margin: 0 0 1rem 0;
  color: #64748b;
}

.requirements {
  margin-top: 1rem;
}

.requirements strong {
  color: #1e293b;
  display: block;
  margin-bottom: 0.5rem;
}

.requirements ul {
  margin: 0;
  padding-left: 1.5rem;
  color: #64748b;
}

/* Installation Commands */
.installation-commands h3 {
  margin: 0 0 1.5rem 0;
  text-align: center;
}

.selected-method {
  max-width: 600px;
  margin: 0 auto;
}

.method-header {
  display: flex;
  align-items: center;
  gap: 0.75rem;
  margin-bottom: 1.5rem;
  padding: 1rem;
  background: #f8fafc;
  border-radius: 12px;
  border: 1px solid #e2e8f0;
}

.method-header .method-icon {
  font-size: 1.5rem;
}

.method-header .method-name {
  font-weight: 600;
  font-size: 1.125rem;
}

.commands-list {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 2rem;
}

.command-block {
  border: 1px solid #e2e8f0;
  border-radius: 12px;
  overflow: hidden;
  background: white;
}

.command-header {
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding: 0.75rem 1rem;
  background: #f8fafc;
  border-bottom: 1px solid #e2e8f0;
}

.step-number {
  font-size: 0.875rem;
  font-weight: 600;
  color: #64748b;
}

.copy-button {
  background: #3b82f6;
  color: white;
  border: none;
  padding: 0.375rem 0.75rem;
  border-radius: 6px;
  font-size: 0.75rem;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  display: flex;
  align-items: center;
  gap: 0.25rem;
}

.copy-button:hover {
  background: #2563eb;
}

.copy-button.copied {
  background: #10b981;
}

.command-text {
  padding: 1rem;
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  background: #1e293b;
  color: #e2e8f0;
  margin: 0;
}

.command-text code {
  background: none;
  color: inherit;
  font-size: 0.875rem;
  word-break: break-all;
}

/* Verification and Setup */
.verification {
  margin-top: 2rem;
  padding-top: 2rem;
  border-top: 1px solid #e2e8f0;
}

.verification h4 {
  margin: 0 0 1rem 0;
  color: #1e293b;
}

.setup-explanation {
  margin-top: 2rem;
  padding: 1.5rem;
  background: #f0f9ff;
  border-radius: 12px;
  border: 1px solid #bae6fd;
}

.setup-explanation h4 {
  margin: 0 0 1rem 0;
  color: #0c4a6e;
}

.setup-explanation ul {
  margin: 0;
  padding-left: 1.5rem;
  color: #0369a1;
}

.setup-explanation code {
  background: #dbeafe;
  color: #1e40af;
  padding: 0.125rem 0.25rem;
  border-radius: 4px;
  font-size: 0.875rem;
}

/* Getting Started */
.starter-commands {
  display: flex;
  flex-direction: column;
  gap: 1rem;
  margin-bottom: 2rem;
}

.next-steps {
  padding: 1.5rem;
  background: #f0fdf4;
  border-radius: 12px;
  border: 1px solid #bbf7d0;
}

.next-steps h4 {
  margin: 0 0 1rem 0;
  color: #166534;
}

.next-steps ul {
  margin: 0;
  padding-left: 1.5rem;
}

.next-steps li {
  margin-bottom: 0.5rem;
}

.next-steps a {
  color: #059669;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s ease;
}

.next-steps a:hover {
  color: #047857;
  text-decoration: underline;
}

/* Navigation */
.wizard-navigation {
  display: flex;
  justify-content: space-between;
  align-items: center;
  position: relative;
  z-index: 1;
}

.nav-button {
  padding: 0.75rem 1.5rem;
  border: none;
  border-radius: 8px;
  font-weight: 500;
  cursor: pointer;
  transition: all 0.2s ease;
  min-width: 120px;
}

.nav-button.primary {
  background: white;
  color: #667eea;
}

.nav-button.primary:hover:not(:disabled) {
  background: #f8fafc;
  transform: translateY(-1px);
}

.nav-button.secondary {
  background: rgba(255, 255, 255, 0.2);
  color: white;
}

.nav-button.secondary:hover:not(:disabled) {
  background: rgba(255, 255, 255, 0.3);
}

.nav-button:disabled {
  opacity: 0.5;
  cursor: not-allowed;
}

.step-indicator-dots {
  display: flex;
  gap: 0.5rem;
}

.step-dot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  border: none;
  background: rgba(255, 255, 255, 0.3);
  cursor: pointer;
  transition: all 0.2s ease;
}

.step-dot:hover {
  background: rgba(255, 255, 255, 0.5);
  transform: scale(1.2);
}

.step-dot.active {
  background: white;
  transform: scale(1.3);
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .installation-wizard {
    padding: 2rem 1rem;
    margin: 1rem 0;
    border-radius: 16px;
  }

  .wizard-header {
    flex-direction: column;
    gap: 1rem;
    text-align: center;
  }

  .wizard-header h2 {
    font-size: 1.5rem;
  }

  .progress-steps {
    grid-template-columns: 1fr;
    gap: 0.75rem;
  }

  .progress-step {
    padding: 0.75rem;
  }

  .step-indicator {
    width: 40px;
    height: 40px;
  }

  .step-icon {
    font-size: 1rem;
  }

  .wizard-content {
    padding: 1.5rem;
  }

  .method-tabs {
    grid-template-columns: repeat(2, 1fr);
    gap: 0.75rem;
  }

  .method-tab {
    padding: 0.75rem;
  }

  .wizard-navigation {
    flex-direction: column;
    gap: 1rem;
  }

  .nav-button {
    width: 100%;
  }

  .command-text code {
    font-size: 0.75rem;
  }
}

@media (max-width: 480px) {
  .method-tabs {
    grid-template-columns: 1fr;
  }

  .step-indicator-dots {
    order: -1;
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .progress-step,
  .method-tab,
  .nav-button,
  .copy-button {
    transition: none;
  }
  
  .progress-step.current,
  .method-tab:hover,
  .nav-button:hover {
    transform: none;
  }
}

/* Focus styles for keyboard navigation */
.method-tab:focus,
.copy-button:focus,
.nav-button:focus,
.step-dot:focus {
  outline: 2px solid #fbbf24;
  outline-offset: 2px;
}
</file>

<file path="src/components/InstallationWizard.tsx">
import { useState, useEffect } from 'react'
import './InstallationWizard.css'

interface InstallMethod {
  id: string
  name: string
  icon: string
  description: string
  commands: string[]
  requirements?: string[]
}

interface OSInfo {
  name: string
  platform: string
  icon: string
}

export function InstallationWizard() {
  const [currentStep, setCurrentStep] = useState(0)
  const [selectedMethod, setSelectedMethod] = useState('go-install')
  const [detectedOS, setDetectedOS] = useState<OSInfo>({ name: 'Unknown', platform: 'unknown', icon: '💻' })
  const [copiedCommand, setCopiedCommand] = useState<string | null>(null)

  // Detect user's operating system
  useEffect(() => {
    const userAgent = navigator.userAgent.toLowerCase()
    const platform = navigator.platform.toLowerCase()
    
    let os: OSInfo = { name: 'Unknown', platform: 'unknown', icon: '💻' }
    
    if (platform.includes('mac') || userAgent.includes('mac')) {
      os = { name: 'macOS', platform: 'macos', icon: '🍎' }
    } else if (platform.includes('win') || userAgent.includes('windows')) {
      os = { name: 'Windows', platform: 'windows', icon: '🪟' }
    } else if (platform.includes('linux') || userAgent.includes('linux')) {
      os = { name: 'Linux', platform: 'linux', icon: '🐧' }
    }
    
    setDetectedOS(os)
  }, [])

  const installMethods: InstallMethod[] = [
    {
      id: 'go-install',
      name: 'Go Install',
      icon: '🚀',
      description: 'Install directly using Go (recommended)',
      commands: ['go install github.com/josephgoksu/TaskWing@latest'],
      requirements: ['Go 1.19 or later installed']
    },
    {
      id: 'homebrew',
      name: 'Homebrew',
      icon: '🍺',
      description: 'Install via Homebrew package manager (macOS/Linux)',
      commands: [
        'brew tap taskwing/taskwing',
        'brew install taskwing'
      ],
      requirements: ['Homebrew installed']
    },
    {
      id: 'binary',
      name: 'Binary Download',
      icon: '📦',
      description: 'Download pre-built binary for your platform',
      commands: getOSSpecificBinaryCommands(detectedOS.platform),
      requirements: ['No additional dependencies']
    },
    {
      id: 'source',
      name: 'Build from Source',
      icon: '🔧',
      description: 'Clone and build from source code',
      commands: [
        'git clone https://github.com/josephgoksu/TaskWing.git',
        'cd taskwing',
        'go build -o taskwing main.go',
        'sudo mv taskwing /usr/local/bin/'
      ],
      requirements: ['Git and Go installed']
    }
  ]

  function getOSSpecificBinaryCommands(platform: string): string[] {
    switch (platform) {
      case 'macos':
        return [
          'curl -L https://github.com/josephgoksu/TaskWing/releases/latest/download/taskwing-darwin-amd64.tar.gz | tar xz',
          'sudo mv taskwing /usr/local/bin/'
        ]
      case 'linux':
        return [
          'curl -L https://github.com/josephgoksu/TaskWing/releases/latest/download/taskwing-linux-amd64.tar.gz | tar xz',
          'sudo mv taskwing /usr/local/bin/'
        ]
      case 'windows':
        return [
          'Invoke-WebRequest -Uri "https://github.com/josephgoksu/TaskWing/releases/latest/download/taskwing-windows-amd64.zip" -OutFile "taskwing.zip"',
          'Expand-Archive -Path "taskwing.zip" -DestinationPath "."',
          'Move-Item "taskwing.exe" "$env:USERPROFILE\\AppData\\Local\\Microsoft\\WindowsApps\\"'
        ]
      default:
        return ['# Download the appropriate binary for your platform from GitHub releases']
    }
  }

  const steps = [
    {
      title: 'Choose Installation Method',
      description: 'Select your preferred way to install TaskWing',
      icon: '🎯'
    },
    {
      title: 'Install TaskWing',
      description: 'Run the installation commands',
      icon: '⚡'
    },
    {
      title: 'Initialize Project',
      description: 'Set up TaskWing in your project',
      icon: '🏗️'
    },
    {
      title: 'Start Using TaskWing',
      description: 'Create your first task and explore features',
      icon: '🎉'
    }
  ]

  const copyToClipboard = async (text: string) => {
    try {
      await navigator.clipboard.writeText(text)
      setCopiedCommand(text)
      setTimeout(() => setCopiedCommand(null), 2000)
    } catch (error) {
      console.error('Failed to copy to clipboard:', error)
    }
  }

  const getCurrentMethod = () => installMethods.find(method => method.id === selectedMethod) || installMethods[0]

  const nextStep = () => {
    if (currentStep < steps.length - 1) {
      setCurrentStep(currentStep + 1)
    }
  }

  const prevStep = () => {
    if (currentStep > 0) {
      setCurrentStep(currentStep - 1)
    }
  }

  return (
    <div className="installation-wizard">
      <div className="wizard-header">
        <h2>Installation Wizard</h2>
        <div className="os-detection">
          <span className="os-icon">{detectedOS.icon}</span>
          <span className="os-name">Detected: {detectedOS.name}</span>
        </div>
      </div>

      {/* Progress Steps */}
      <div className="progress-steps">
        {steps.map((step, index) => (
          <div 
            key={index}
            className={`progress-step ${index <= currentStep ? 'active' : ''} ${index === currentStep ? 'current' : ''}`}
          >
            <div className="step-indicator">
              <span className="step-icon">{step.icon}</span>
              <span className="step-number">{index + 1}</span>
            </div>
            <div className="step-content">
              <div className="step-title">{step.title}</div>
              <div className="step-description">{step.description}</div>
            </div>
          </div>
        ))}
      </div>

      {/* Wizard Content */}
      <div className="wizard-content">
        {currentStep === 0 && (
          <div className="method-selection">
            <h3>Choose Your Installation Method</h3>
            <div className="method-tabs">
              {installMethods.map((method) => (
                <button
                  key={method.id}
                  className={`method-tab ${selectedMethod === method.id ? 'active' : ''}`}
                  onClick={() => setSelectedMethod(method.id)}
                >
                  <span className="method-icon">{method.icon}</span>
                  <span className="method-name">{method.name}</span>
                </button>
              ))}
            </div>
            
            <div className="method-details">
              <div className="method-info">
                <h4>{getCurrentMethod().name}</h4>
                <p>{getCurrentMethod().description}</p>
                {getCurrentMethod().requirements && (
                  <div className="requirements">
                    <strong>Requirements:</strong>
                    <ul>
                      {getCurrentMethod().requirements?.map((req, index) => (
                        <li key={index}>{req}</li>
                      ))}
                    </ul>
                  </div>
                )}
              </div>
            </div>
          </div>
        )}

        {currentStep === 1 && (
          <div className="installation-commands">
            <h3>Install TaskWing</h3>
            <div className="selected-method">
              <div className="method-header">
                <span className="method-icon">{getCurrentMethod().icon}</span>
                <span className="method-name">{getCurrentMethod().name}</span>
              </div>
              
              <div className="commands-list">
                {getCurrentMethod().commands.map((command, index) => (
                  <div key={index} className="command-block">
                    <div className="command-header">
                      <span className="step-number">Step {index + 1}</span>
                      <button
                        className={`copy-button ${copiedCommand === command ? 'copied' : ''}`}
                        onClick={() => copyToClipboard(command)}
                      >
                        {copiedCommand === command ? '✓ Copied!' : '📋 Copy'}
                      </button>
                    </div>
                    <div className="command-text">
                      <code>{command}</code>
                    </div>
                  </div>
                ))}
              </div>
              
              <div className="verification">
                <h4>Verify Installation</h4>
                <div className="command-block">
                  <div className="command-header">
                    <span className="step-number">Verify</span>
                    <button
                      className={`copy-button ${copiedCommand === 'taskwing --version' ? 'copied' : ''}`}
                      onClick={() => copyToClipboard('taskwing --version')}
                    >
                      {copiedCommand === 'taskwing --version' ? '✓ Copied!' : '📋 Copy'}
                    </button>
                  </div>
                  <div className="command-text">
                    <code>taskwing --version</code>
                  </div>
                </div>
              </div>
            </div>
          </div>
        )}

        {currentStep === 2 && (
          <div className="project-setup">
            <h3>Initialize Your Project</h3>
            <p>Set up TaskWing in your current project directory:</p>
            
            <div className="command-block">
              <div className="command-header">
                <span className="step-number">Initialize</span>
                <button
                  className={`copy-button ${copiedCommand === 'taskwing init' ? 'copied' : ''}`}
                  onClick={() => copyToClipboard('taskwing init')}
                >
                  {copiedCommand === 'taskwing init' ? '✓ Copied!' : '📋 Copy'}
                </button>
              </div>
              <div className="command-text">
                <code>taskwing init</code>
              </div>
            </div>

            <div className="setup-explanation">
              <h4>What this does:</h4>
              <ul>
                <li>Creates a <code>.taskwing</code> directory in your project</li>
                <li>Sets up the default configuration file</li>
                <li>Initializes the tasks database</li>
                <li>Configures project-specific settings</li>
              </ul>
            </div>
          </div>
        )}

        {currentStep === 3 && (
          <div className="getting-started">
            <h3>Start Using TaskWing</h3>
            <p>You're all set! Try these commands to get started:</p>
            
            <div className="starter-commands">
              <div className="command-block">
                <div className="command-header">
                  <span className="step-number">Create Task</span>
                  <button
                    className={`copy-button ${copiedCommand === 'taskwing add "My first task"' ? 'copied' : ''}`}
                    onClick={() => copyToClipboard('taskwing add "My first task"')}
                  >
                    {copiedCommand === 'taskwing add "My first task"' ? '✓ Copied!' : '📋 Copy'}
                  </button>
                </div>
                <div className="command-text">
                  <code>taskwing add "My first task"</code>
                </div>
              </div>

              <div className="command-block">
                <div className="command-header">
                  <span className="step-number">List Tasks</span>
                  <button
                    className={`copy-button ${copiedCommand === 'taskwing list' ? 'copied' : ''}`}
                    onClick={() => copyToClipboard('taskwing list')}
                  >
                    {copiedCommand === 'taskwing list' ? '✓ Copied!' : '📋 Copy'}
                  </button>
                </div>
                <div className="command-text">
                  <code>taskwing list</code>
                </div>
              </div>

              <div className="command-block">
                <div className="command-header">
                  <span className="step-number">Start MCP Server</span>
                  <button
                    className={`copy-button ${copiedCommand === 'taskwing mcp' ? 'copied' : ''}`}
                    onClick={() => copyToClipboard('taskwing mcp')}
                  >
                    {copiedCommand === 'taskwing mcp' ? '✓ Copied!' : '📋 Copy'}
                  </button>
                </div>
                <div className="command-text">
                  <code>taskwing mcp</code>
                </div>
              </div>
            </div>

            <div className="next-steps">
              <h4>Next Steps:</h4>
              <ul>
                <li>
                  <a href="https://github.com/josephgoksu/TaskWing#documentation" target="_blank" rel="noopener noreferrer">
                    📚 Read the full documentation
                  </a>
                </li>
                <li>
                  <a href="https://github.com/josephgoksu/TaskWing/blob/main/examples" target="_blank" rel="noopener noreferrer">
                    💡 Explore usage examples
                  </a>
                </li>
                <li>
                  <a href="https://github.com/josephgoksu/TaskWing/discussions" target="_blank" rel="noopener noreferrer">
                    💬 Join the community discussions
                  </a>
                </li>
                <li>
                  <a href="https://github.com/josephgoksu/TaskWing/issues" target="_blank" rel="noopener noreferrer">
                    🐛 Report issues or request features
                  </a>
                </li>
              </ul>
            </div>
          </div>
        )}
      </div>

      {/* Navigation */}
      <div className="wizard-navigation">
        <button 
          className="nav-button secondary"
          onClick={prevStep}
          disabled={currentStep === 0}
        >
          ← Previous
        </button>
        
        <div className="step-indicator-dots">
          {steps.map((_, index) => (
            <button
              key={index}
              className={`step-dot ${index <= currentStep ? 'active' : ''}`}
              onClick={() => setCurrentStep(index)}
            />
          ))}
        </div>
        
        <button 
          className="nav-button primary"
          onClick={nextStep}
          disabled={currentStep === steps.length - 1}
        >
          {currentStep === steps.length - 1 ? '🎉 Complete!' : 'Next →'}
        </button>
      </div>
    </div>
  )
}
</file>

<file path="src/components/LazySection.tsx">
import { useState, useRef, useEffect, type ReactNode } from 'react'

interface LazySectionProps {
  children: ReactNode
  className?: string
  threshold?: number
  rootMargin?: string
  fallback?: ReactNode
}

export function LazySection({ 
  children, 
  className = '', 
  threshold = 0.1,
  rootMargin = '100px',
  fallback = null
}: LazySectionProps) {
  const [isVisible, setIsVisible] = useState(false)
  const ref = useRef<HTMLDivElement>(null)

  useEffect(() => {
    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsVisible(true)
          observer.disconnect()
        }
      },
      {
        threshold,
        rootMargin
      }
    )

    if (ref.current) {
      observer.observe(ref.current)
    }

    return () => observer.disconnect()
  }, [threshold, rootMargin])

  return (
    <div ref={ref} className={className}>
      {isVisible ? children : fallback}
    </div>
  )
}
</file>

<file path="src/components/OptimizedImage.tsx">
import { useState, useRef, useEffect } from 'react'

interface OptimizedImageProps {
  src: string
  alt: string
  className?: string
  lazy?: boolean
  webpSrc?: string
  width?: number
  height?: number
  priority?: boolean
}

export function OptimizedImage({
  src,
  alt,
  className = '',
  lazy = true,
  webpSrc,
  width,
  height,
  priority = false
}: OptimizedImageProps) {
  const [isLoaded, setIsLoaded] = useState(false)
  const [isIntersecting, setIsIntersecting] = useState(!lazy || priority)
  const imgRef = useRef<HTMLImageElement>(null)

  useEffect(() => {
    if (!lazy || priority) return

    const observer = new IntersectionObserver(
      ([entry]) => {
        if (entry.isIntersecting) {
          setIsIntersecting(true)
          observer.disconnect()
        }
      },
      {
        rootMargin: '50px' // Load images 50px before they come into view
      }
    )

    if (imgRef.current) {
      observer.observe(imgRef.current)
    }

    return () => observer.disconnect()
  }, [lazy, priority])

  const handleLoad = () => {
    setIsLoaded(true)
  }

  const shouldLoad = isIntersecting || priority

  return (
    <div className={`optimized-image ${className}`}>
      {shouldLoad && (
        <picture>
          {webpSrc && (
            <source srcSet={webpSrc} type="image/webp" />
          )}
          <img
            ref={imgRef}
            src={src}
            alt={alt}
            width={width}
            height={height}
            loading={priority ? 'eager' : 'lazy'}
            decoding="async"
            onLoad={handleLoad}
            className={`transition-opacity duration-300 ${
              isLoaded ? 'opacity-100' : 'opacity-0'
            }`}
            style={{
              aspectRatio: width && height ? `${width} / ${height}` : undefined
            }}
          />
        </picture>
      )}
      {!shouldLoad && (
        <div
          ref={imgRef}
          className="placeholder bg-gray-200 animate-pulse"
          style={{
            width: width ? `${width}px` : '100%',
            height: height ? `${height}px` : '200px',
            aspectRatio: width && height ? `${width} / ${height}` : undefined
          }}
        />
      )}
    </div>
  )
}
</file>

<file path="src/components/TestimonialsSection.css">
.testimonials-section {
  padding: 6rem 0;
  background: linear-gradient(135deg, #f8fafc 0%, #f1f5f9 100%);
  position: relative;
  overflow: hidden;
}

.testimonials-section::before {
  content: '';
  position: absolute;
  top: 0;
  left: 0;
  right: 0;
  bottom: 0;
  background: radial-gradient(circle at 20% 50%, rgba(59, 130, 246, 0.05) 0%, transparent 50%),
              radial-gradient(circle at 80% 20%, rgba(168, 85, 247, 0.05) 0%, transparent 50%);
  pointer-events: none;
}

.testimonials-section .container {
  position: relative;
  z-index: 1;
}

.testimonials-section .section-title {
  text-align: center;
  font-size: 2.5rem;
  font-weight: 700;
  margin-bottom: 3rem;
  color: #1e293b;
}

/* Social Proof Stats */
.social-proof-stats {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(200px, 1fr));
  gap: 2rem;
  margin-bottom: 4rem;
  padding: 2rem;
  background: rgba(255, 255, 255, 0.8);
  backdrop-filter: blur(10px);
  border-radius: 16px;
  border: 1px solid rgba(255, 255, 255, 0.2);
  box-shadow: 0 8px 32px rgba(0, 0, 0, 0.1);
}

.stat-item {
  text-align: center;
}

.stat-number {
  font-size: 2.5rem;
  font-weight: 800;
  background: linear-gradient(135deg, #3b82f6, #8b5cf6);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
  line-height: 1.2;
  margin-bottom: 0.5rem;
}

.stat-label {
  color: #64748b;
  font-weight: 500;
  text-transform: uppercase;
  letter-spacing: 0.05em;
  font-size: 0.875rem;
}

/* Featured Testimonial */
.featured-testimonial {
  background: white;
  border-radius: 20px;
  padding: 3rem;
  margin: 3rem 0;
  box-shadow: 0 10px 40px rgba(0, 0, 0, 0.1);
  border: 1px solid rgba(226, 232, 240, 0.8);
  position: relative;
  animation: fadeIn 0.8s ease-out;
}

@keyframes fadeIn {
  from { opacity: 0; transform: translateY(20px); }
  to { opacity: 1; transform: translateY(0); }
}

.testimonial-content {
  text-align: center;
  margin-bottom: 2rem;
}

.quote-mark {
  font-size: 4rem;
  color: #e2e8f0;
  font-family: Georgia, serif;
  line-height: 1;
  margin-bottom: 1rem;
}

.testimonial-text {
  font-size: 1.25rem;
  line-height: 1.6;
  color: #374151;
  font-style: italic;
  margin: 0 0 1.5rem 0;
  max-width: 800px;
  margin-left: auto;
  margin-right: auto;
}

.rating {
  display: flex;
  justify-content: center;
  gap: 0.25rem;
  margin-bottom: 2rem;
}

.star {
  font-size: 1.25rem;
  transition: transform 0.2s;
}

.star.filled {
  transform: scale(1.1);
}

.testimonial-author {
  display: flex;
  align-items: center;
  justify-content: center;
  gap: 1rem;
}

.author-avatar {
  width: 60px;
  height: 60px;
  border-radius: 50%;
  object-fit: cover;
  border: 3px solid #e2e8f0;
}

.author-info {
  text-align: left;
}

.author-name {
  font-weight: 600;
  color: #1e293b;
  font-size: 1.125rem;
  margin-bottom: 0.25rem;
}

.author-role {
  color: #64748b;
  font-size: 0.875rem;
}

/* Testimonial Navigation */
.testimonial-nav {
  display: flex;
  justify-content: center;
  gap: 0.75rem;
  margin: 2rem 0 4rem 0;
}

.nav-dot {
  width: 12px;
  height: 12px;
  border-radius: 50%;
  border: none;
  background: #cbd5e1;
  cursor: pointer;
  transition: all 0.3s ease;
}

.nav-dot:hover {
  background: #94a3b8;
  transform: scale(1.2);
}

.nav-dot.active {
  background: linear-gradient(135deg, #3b82f6, #8b5cf6);
  transform: scale(1.3);
}

/* Companies Section */
.companies-section {
  margin: 4rem 0;
}

.companies-title {
  text-align: center;
  color: #64748b;
  font-size: 1rem;
  font-weight: 500;
  margin-bottom: 2rem;
  text-transform: uppercase;
  letter-spacing: 0.05em;
}

.companies-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(140px, 1fr));
  gap: 1.5rem;
  max-width: 800px;
  margin: 0 auto;
}

.company-item {
  display: flex;
  flex-direction: column;
  align-items: center;
  gap: 0.75rem;
  padding: 1.5rem 1rem;
  background: rgba(255, 255, 255, 0.6);
  border-radius: 12px;
  transition: all 0.3s ease;
  border: 1px solid rgba(226, 232, 240, 0.8);
}

.company-item:hover {
  background: rgba(255, 255, 255, 0.9);
  transform: translateY(-2px);
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
}

.company-logo {
  font-size: 2rem;
  filter: grayscale(1);
  transition: filter 0.3s ease;
}

.company-item:hover .company-logo {
  filter: grayscale(0);
}

.company-name {
  font-weight: 600;
  color: #64748b;
  font-size: 0.875rem;
  text-align: center;
}

/* All Testimonials Grid */
.all-testimonials {
  margin-top: 4rem;
}

.testimonials-grid-title {
  text-align: center;
  font-size: 1.5rem;
  font-weight: 600;
  margin-bottom: 2rem;
  color: #1e293b;
}

.testimonials-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  margin-top: 2rem;
}

.testimonial-card {
  background: white;
  padding: 2rem;
  border-radius: 16px;
  box-shadow: 0 4px 20px rgba(0, 0, 0, 0.08);
  border: 1px solid rgba(226, 232, 240, 0.8);
  transition: all 0.3s ease;
}

.testimonial-card:hover {
  transform: translateY(-4px);
  box-shadow: 0 8px 30px rgba(0, 0, 0, 0.12);
}

.card-rating {
  display: flex;
  gap: 0.25rem;
  margin-bottom: 1rem;
}

.card-content {
  color: #374151;
  line-height: 1.6;
  margin: 0 0 1.5rem 0;
  font-style: italic;
}

.card-author {
  display: flex;
  align-items: center;
  gap: 0.75rem;
}

.card-avatar {
  width: 48px;
  height: 48px;
  border-radius: 50%;
  object-fit: cover;
  border: 2px solid #e2e8f0;
}

.card-author-name {
  font-weight: 600;
  color: #1e293b;
  margin-bottom: 0.25rem;
}

.card-author-role {
  color: #64748b;
  font-size: 0.875rem;
}

/* Mobile Responsive */
@media (max-width: 768px) {
  .testimonials-section {
    padding: 4rem 0;
  }

  .testimonials-section .section-title {
    font-size: 2rem;
    margin-bottom: 2rem;
  }

  .social-proof-stats {
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
    padding: 1.5rem;
    margin-bottom: 2rem;
  }

  .stat-number {
    font-size: 2rem;
  }

  .featured-testimonial {
    padding: 2rem;
    margin: 2rem 0;
  }

  .testimonial-text {
    font-size: 1.125rem;
  }

  .testimonial-author {
    flex-direction: column;
    text-align: center;
  }

  .author-info {
    text-align: center;
  }

  .companies-grid {
    grid-template-columns: repeat(2, 1fr);
    gap: 1rem;
  }

  .company-item {
    padding: 1rem;
  }

  .testimonials-grid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }

  .testimonial-card {
    padding: 1.5rem;
  }
}

@media (max-width: 480px) {
  .social-proof-stats {
    grid-template-columns: 1fr;
  }

  .stat-number {
    font-size: 1.75rem;
  }

  .testimonial-text {
    font-size: 1rem;
  }

  .companies-grid {
    grid-template-columns: 1fr;
    max-width: 200px;
  }
}

/* Accessibility */
@media (prefers-reduced-motion: reduce) {
  .featured-testimonial {
    animation: none;
  }
  
  .nav-dot,
  .company-item,
  .testimonial-card {
    transition: none;
  }
  
  .nav-dot:hover,
  .company-item:hover,
  .testimonial-card:hover {
    transform: none;
  }
}

/* High contrast mode */
@media (prefers-contrast: high) {
  .testimonials-section {
    background: #ffffff;
  }
  
  .featured-testimonial,
  .testimonial-card {
    border: 2px solid #000000;
  }
  
  .stat-number {
    color: #000000;
    -webkit-text-fill-color: #000000;
  }
}
</file>

<file path="src/components/TestimonialsSection.tsx">
import { useState, useEffect } from 'react'
import './TestimonialsSection.css'

interface Testimonial {
  id: string
  name: string
  role: string
  company: string
  avatar: string
  content: string
  rating: number
}

interface SocialProofStats {
  githubStars: number
  downloads: string
  activeUsers: string
  companies: number
}

const testimonials: Testimonial[] = [
  {
    id: '1',
    name: 'Sarah Chen',
    role: 'Senior Software Engineer',
    company: 'Stripe',
    avatar: 'https://images.unsplash.com/photo-1494790108755-2616b332c77e?w=150&h=150&fit=crop&crop=face',
    content: "TaskWing's MCP integration changed how our team manages sprints. The AI-powered task breakdown saves us hours every week, and the dependency tracking prevents those painful blockers.",
    rating: 5
  },
  {
    id: '2', 
    name: 'Marcus Rodriguez',
    role: 'Tech Lead',
    company: 'GitHub',
    avatar: 'https://images.unsplash.com/photo-1507003211169-0a1dd7228f2d?w=150&h=150&fit=crop&crop=face',
    content: "Finally, a task manager built for developers! The CLI-first approach fits perfectly into our workflow. The fact that it's built in Go means it's blazing fast even with thousands of tasks.",
    rating: 5
  },
  {
    id: '3',
    name: 'Dr. Emily Watson',
    role: 'Engineering Manager',
    company: 'Anthropic',
    avatar: 'https://images.unsplash.com/photo-1438761681033-6461ffad8d80?w=150&h=150&fit=crop&crop=face', 
    content: "The Model Context Protocol integration is genius. Our AI tools can now directly interact with task data, making sprint planning and retrospectives incredibly insightful.",
    rating: 5
  },
  {
    id: '4',
    name: 'Alex Thompson',
    role: 'Principal Developer',
    company: 'Vercel',
    avatar: 'https://images.unsplash.com/photo-1472099645785-5658abf4ff4e?w=150&h=150&fit=crop&crop=face',
    content: "TaskWing eliminated the context switching between our project management tools and terminal. Everything we need is right in the CLI, and the Git integration is seamless.",
    rating: 5
  }
]

const companies = [
  { name: 'Stripe', logo: '🟣' },
  { name: 'GitHub', logo: '🐙' },
  { name: 'Anthropic', logo: '🤖' },
  { name: 'Vercel', logo: '▲' },
  { name: 'OpenAI', logo: '🔥' },
  { name: 'Supabase', logo: '🟢' },
  { name: 'Linear', logo: '📐' },
  { name: 'Clerk', logo: '🔐' }
]

export function TestimonialsSection() {
  const [currentTestimonial, setCurrentTestimonial] = useState(0)
  const [stats, setStats] = useState<SocialProofStats>({
    githubStars: 1200,
    downloads: '25K+',
    activeUsers: '5K+', 
    companies: 150
  })

  // Auto-rotate testimonials
  useEffect(() => {
    const interval = setInterval(() => {
      setCurrentTestimonial((prev) => (prev + 1) % testimonials.length)
    }, 6000)
    return () => clearInterval(interval)
  }, [])

  // Fetch GitHub stars (mock for now)
  useEffect(() => {
    // In a real implementation, you'd fetch from GitHub API
    // fetch('https://api.github.com/repos/taskwing/taskwing')
    //   .then(res => res.json())
    //   .then(data => setStats(prev => ({ ...prev, githubStars: data.stargazers_count })))
    
    // Simulate growing numbers
    const interval = setInterval(() => {
      setStats(prev => ({
        ...prev,
        githubStars: prev.githubStars + Math.floor(Math.random() * 3)
      }))
    }, 10000)
    
    return () => clearInterval(interval)
  }, [])

  const renderStars = (rating: number) => {
    return Array.from({ length: 5 }, (_, i) => (
      <span key={i} className={`star ${i < rating ? 'filled' : ''}`}>
        ⭐
      </span>
    ))
  }

  return (
    <section className="testimonials-section">
      <div className="container">
        <h2 className="section-title">Trusted by developers worldwide</h2>
        
        {/* Social Proof Stats */}
        <div className="social-proof-stats">
          <div className="stat-item">
            <div className="stat-number">{stats.githubStars.toLocaleString()}</div>
            <div className="stat-label">GitHub Stars</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{stats.downloads}</div>
            <div className="stat-label">Downloads</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{stats.activeUsers}</div>
            <div className="stat-label">Active Users</div>
          </div>
          <div className="stat-item">
            <div className="stat-number">{stats.companies}+</div>
            <div className="stat-label">Companies</div>
          </div>
        </div>

        {/* Featured Testimonial */}
        <div className="featured-testimonial">
          <div className="testimonial-content">
            <div className="quote-mark">"</div>
            <p className="testimonial-text">
              {testimonials[currentTestimonial].content}
            </p>
            <div className="rating">
              {renderStars(testimonials[currentTestimonial].rating)}
            </div>
          </div>
          
          <div className="testimonial-author">
            <img 
              src={testimonials[currentTestimonial].avatar} 
              alt={testimonials[currentTestimonial].name}
              className="author-avatar"
            />
            <div className="author-info">
              <div className="author-name">{testimonials[currentTestimonial].name}</div>
              <div className="author-role">
                {testimonials[currentTestimonial].role} at {testimonials[currentTestimonial].company}
              </div>
            </div>
          </div>
        </div>

        {/* Testimonial Navigation */}
        <div className="testimonial-nav">
          {testimonials.map((_, index) => (
            <button
              key={index}
              className={`nav-dot ${index === currentTestimonial ? 'active' : ''}`}
              onClick={() => setCurrentTestimonial(index)}
              aria-label={`View testimonial ${index + 1}`}
            />
          ))}
        </div>

        {/* Company Logos */}
        <div className="companies-section">
          <h3 className="companies-title">Used by teams at</h3>
          <div className="companies-grid">
            {companies.map((company, index) => (
              <div key={index} className="company-item">
                <span className="company-logo">{company.logo}</span>
                <span className="company-name">{company.name}</span>
              </div>
            ))}
          </div>
        </div>

        {/* All Testimonials Grid (for SEO) */}
        <div className="all-testimonials">
          <h3 className="testimonials-grid-title">What developers are saying</h3>
          <div className="testimonials-grid">
            {testimonials.map((testimonial) => (
              <div key={testimonial.id} className="testimonial-card">
                <div className="card-rating">
                  {renderStars(testimonial.rating)}
                </div>
                <p className="card-content">"{testimonial.content}"</p>
                <div className="card-author">
                  <img 
                    src={testimonial.avatar} 
                    alt={testimonial.name}
                    className="card-avatar"
                  />
                  <div className="card-author-info">
                    <div className="card-author-name">{testimonial.name}</div>
                    <div className="card-author-role">
                      {testimonial.role} at {testimonial.company}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>
        </div>
      </div>
    </section>
  )
}
</file>

<file path="src/components/TypewriterTerminal.css">
.typewriter-terminal {
  background: #1a1a1a;
  border-radius: 12px;
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  font-size: 14px;
  line-height: 1.5;
  box-shadow: 0 20px 50px rgba(0, 0, 0, 0.3);
  overflow: hidden;
  max-width: 100%;
  width: 100%;
}

.terminal-header {
  background: #2d2d2d;
  padding: 12px 16px;
  display: flex;
  align-items: center;
  gap: 12px;
  border-bottom: 1px solid #404040;
}

.terminal-buttons {
  display: flex;
  gap: 6px;
}

.terminal-buttons .btn {
  width: 12px;
  height: 12px;
  border-radius: 50%;
}

.terminal-buttons .btn.red {
  background: #ff5f57;
}

.terminal-buttons .btn.yellow {
  background: #ffbd2e;
}

.terminal-buttons .btn.green {
  background: #28ca42;
}

.terminal-title {
  color: #a0a0a0;
  font-size: 13px;
  font-weight: 500;
}

.terminal-body {
  padding: 20px;
  min-height: 220px;
  background: #1a1a1a;
  color: #e0e0e0;
}

.terminal-line {
  display: flex;
  margin-bottom: 6px;
  word-wrap: break-word;
  white-space: pre-wrap;
  align-items: baseline;
}

.prompt {
  color: #67d391;
  margin-right: 8px;
  user-select: none;
  flex-shrink: 0;
}

.command {
  color: #e0e0e0;
}

.output {
  color: #cbd5e0;
}

.cursor {
  background: #67d391;
  color: #1a1a1a;
  animation: blink 1s infinite;
  margin-left: 2px;
  padding: 0 1px;
}

@keyframes blink {
  0%, 50% {
    opacity: 1;
  }
  51%, 100% {
    opacity: 0;
  }
}

/* Mobile optimizations */
@media (max-width: 768px) {
  .typewriter-terminal {
    font-size: 13px;
    border-radius: 8px;
  }
  
  .terminal-header {
    padding: 10px 16px;
  }
  
  .terminal-body {
    padding: 16px;
    min-height: 180px;
  }
  
  .terminal-line {
    margin-bottom: 4px;
  }
}

@media (max-width: 480px) {
  .typewriter-terminal {
    font-size: 12px;
  }
  
  .terminal-body {
    padding: 14px;
    min-height: 160px;
  }
}

/* High contrast mode support */
@media (prefers-contrast: high) {
  .typewriter-terminal {
    border: 2px solid #ffffff;
  }
  
  .prompt {
    color: #00ff00;
  }
  
  .command {
    color: #ffffff;
  }
  
  .output {
    color: #cccccc;
  }
}

/* Reduced motion support */
@media (prefers-reduced-motion: reduce) {
  .cursor {
    animation: none;
    opacity: 1;
  }
}
</file>

<file path="src/components/TypewriterTerminal.tsx">
import { useState, useEffect, useRef } from 'react'
import './TypewriterTerminal.css'

interface TerminalLine {
  type: 'prompt' | 'command' | 'output'
  text: string
  delay?: number
}

interface TerminalSequence {
  lines: TerminalLine[]
  pauseAfter?: number
}

interface TypewriterTerminalProps {
  sequences: TerminalSequence[]
  title?: string
  className?: string
}

export function TypewriterTerminal({ sequences, title = 'taskwing', className = '' }: TypewriterTerminalProps) {
  const [currentSequence, setCurrentSequence] = useState(0)
  const [currentLine, setCurrentLine] = useState(0)
  const [currentChar, setCurrentChar] = useState(0)
  const [displayedLines, setDisplayedLines] = useState<string[]>([])
  const [isTyping, setIsTyping] = useState(false)
  const timeoutRef = useRef<number | undefined>(undefined)

  useEffect(() => {
    if (sequences.length === 0) return

    const currentSeq = sequences[currentSequence]
    const line = currentSeq.lines[currentLine]

    if (!line) {
      // Sequence complete, pause and move to next
      timeoutRef.current = window.setTimeout(() => {
        setCurrentSequence((prev) => (prev + 1) % sequences.length)
        setCurrentLine(0)
        setCurrentChar(0)
        setDisplayedLines([])
      }, currentSeq.pauseAfter || 2000)
      return
    }

    if (currentChar === 0) {
      setIsTyping(true)
      // Add new line to display
      setDisplayedLines(prev => [...prev, ''])
    }

    if (currentChar < line.text.length) {
      const typingSpeed = line.type === 'command' ? 100 : 50
      const delay = line.delay || typingSpeed

      timeoutRef.current = window.setTimeout(() => {
        setDisplayedLines(prev => {
          const newLines = [...prev]
          newLines[newLines.length - 1] = line.text.slice(0, currentChar + 1)
          return newLines
        })
        setCurrentChar(prev => prev + 1)
      }, delay)
    } else {
      // Line complete
      setIsTyping(false)
      timeoutRef.current = window.setTimeout(() => {
        setCurrentLine(prev => prev + 1)
        setCurrentChar(0)
      }, line.type === 'command' ? 500 : 200)
    }

    return () => {
      if (timeoutRef.current) {
        window.clearTimeout(timeoutRef.current)
      }
    }
  }, [sequences, currentSequence, currentLine, currentChar])

  const renderLine = (text: string, index: number) => {
    const line = sequences[currentSequence]?.lines[index]
    const isCurrentLine = index === displayedLines.length - 1 && isTyping

    if (line?.type === 'prompt') {
      return (
        <div key={index} className="terminal-line">
          <span className="prompt">$</span>
          <span className="command">{text}</span>
          {isCurrentLine && <span className="cursor">_</span>}
        </div>
      )
    } else if (line?.type === 'command') {
      return (
        <div key={index} className="terminal-line">
          <span className="prompt">$</span>
          <span className="command">{text}</span>
          {isCurrentLine && <span className="cursor">_</span>}
        </div>
      )
    } else {
      return (
        <div key={index} className="terminal-line">
          <span className="output">{text}</span>
          {isCurrentLine && <span className="cursor">_</span>}
        </div>
      )
    }
  }

  return (
    <div className={`typewriter-terminal ${className}`}>
      <div className="terminal-header">
        <div className="terminal-buttons">
          <span className="btn red"></span>
          <span className="btn yellow"></span>
          <span className="btn green"></span>
        </div>
        <span className="terminal-title">{title}</span>
      </div>
      <div className="terminal-body">
        {displayedLines.map((text, index) => renderLine(text, index))}
      </div>
    </div>
  )
}
</file>

<file path="src/hooks/useAnalytics.ts">
import { useEffect, useCallback } from 'react'
import { analytics, ScrollTracker, abTesting } from '../utils/analytics'

// Hook for initializing analytics
export function useAnalytics(measurementId?: string) {
  useEffect(() => {
    if (measurementId) {
      analytics.init(measurementId, {
        // Additional GA4 configuration
        send_page_view: true,
        cookie_domain: 'auto',
        cookie_expires: 63072000, // 2 years
        allow_google_signals: true,
        allow_ad_personalization_signals: true
      })

      // Initialize scroll tracking
      new ScrollTracker()
    }
  }, [measurementId])

  return analytics
}

// Hook for tracking download events
export function useDownloadTracking() {
  const trackDownload = useCallback((downloadType: string, options?: {
    version?: string
    source?: string
    buttonLocation?: string
  }) => {
    analytics.trackDownload(downloadType, options?.version, options?.source)
    
    // Also track as button click
    if (options?.buttonLocation) {
      analytics.trackButtonClick(
        `Download ${downloadType}`,
        options.buttonLocation,
        undefined
      )
    }
  }, [])

  return { trackDownload }
}

// Hook for tracking button clicks
export function useButtonTracking() {
  const trackClick = useCallback((
    buttonName: string, 
    location: string, 
    url?: string
  ) => {
    analytics.trackButtonClick(buttonName, location, url)
  }, [])

  return { trackClick }
}

// Hook for A/B testing
export function useAbTesting() {
  const createExperiment = useCallback((
    experimentId: string,
    variants: string[],
    trafficAllocation: number = 1.0
  ) => {
    return abTesting.defineExperiment(experimentId, variants, trafficAllocation)
  }, [])

  const getVariant = useCallback((experimentId: string) => {
    return abTesting.getVariant(experimentId)
  }, [])

  return { createExperiment, getVariant }
}

// Hook for engagement tracking
export function useEngagementTracking() {
  useEffect(() => {
    let startTime = Date.now()
    let isActive = true
    let totalEngagementTime = 0

    const trackEngagement = () => {
      if (isActive) {
        const sessionTime = Date.now() - startTime
        totalEngagementTime += sessionTime
        analytics.trackEngagement('page_engagement', totalEngagementTime)
      }
    }

    const handleVisibilityChange = () => {
      if (document.hidden) {
        if (isActive) {
          totalEngagementTime += Date.now() - startTime
          isActive = false
        }
      } else {
        startTime = Date.now()
        isActive = true
      }
    }

    const handleBeforeUnload = () => {
      trackEngagement()
    }

    // Track engagement every 30 seconds
    const engagementInterval = setInterval(trackEngagement, 30000)

    // Listen for page visibility changes
    document.addEventListener('visibilitychange', handleVisibilityChange)
    window.addEventListener('beforeunload', handleBeforeUnload)

    return () => {
      clearInterval(engagementInterval)
      document.removeEventListener('visibilitychange', handleVisibilityChange)
      window.removeEventListener('beforeunload', handleBeforeUnload)
      trackEngagement() // Final engagement tracking
    }
  }, [])
}

// Hook for form tracking
export function useFormTracking() {
  const trackFormStart = useCallback((formName: string) => {
    analytics.trackEvent({
      action: 'form_start',
      category: 'form',
      label: formName
    })
  }, [])

  const trackFormComplete = useCallback((formName: string) => {
    analytics.trackEvent({
      action: 'form_complete',
      category: 'form',
      label: formName
    })
  }, [])

  const trackFormError = useCallback((formName: string, errorType: string) => {
    analytics.trackEvent({
      action: 'form_error',
      category: 'form',
      label: `${formName} - ${errorType}`
    })
  }, [])

  return { trackFormStart, trackFormComplete, trackFormError }
}
</file>

<file path="src/utils/analytics.ts">
// Google Analytics 4 Implementation
declare global {
  interface Window {
    gtag: (...args: unknown[]) => void;
    dataLayer: unknown[];
  }
}

export interface AnalyticsEvent {
  action: string;
  category: string;
  label?: string;
  value?: number;
  custom_parameters?: Record<string, unknown>;
}

export interface ConversionEvent {
  event_name: string;
  currency?: string;
  value?: number;
  transaction_id?: string;
  items?: unknown[];
  custom_parameters?: Record<string, unknown>;
}

class Analytics {
  private isInitialized = false;
  private gaId: string | null = null;

  constructor() {
    // Initialize data layer
    window.dataLayer = window.dataLayer || [];
    window.gtag = function(...args) {
      window.dataLayer.push(args);
    };
  }

  // Initialize GA4
  init(measurementId: string, config: Record<string, unknown> = {}) {
    if (this.isInitialized) return;
    
    this.gaId = measurementId;
    
    // Load GA4 script
    const script = document.createElement('script');
    script.async = true;
    script.src = `https://www.googletagmanager.com/gtag/js?id=${measurementId}`;
    document.head.appendChild(script);

    // Configure GA4
    window.gtag('js', new Date());
    window.gtag('config', measurementId, {
      // Enhanced ecommerce
      send_page_view: true,
      allow_google_signals: true,
      allow_ad_personalization_signals: true,
      // Privacy settings
      anonymize_ip: true,
      cookie_flags: 'SameSite=Strict;Secure',
      ...config
    });

    this.isInitialized = true;
    console.log('Analytics initialized with GA4:', measurementId);
  }

  // Track page views
  trackPageView(page_title?: string, page_location?: string) {
    if (!this.isInitialized) return;
    
    window.gtag('event', 'page_view', {
      page_title: page_title || document.title,
      page_location: page_location || window.location.href,
    });
  }

  // Track custom events
  trackEvent(event: AnalyticsEvent) {
    if (!this.isInitialized) return;
    
    window.gtag('event', event.action, {
      event_category: event.category,
      event_label: event.label,
      value: event.value,
      ...event.custom_parameters
    });
  }

  // Track conversions (downloads, signups, etc.)
  trackConversion(event: ConversionEvent) {
    if (!this.isInitialized) return;
    
    window.gtag('event', event.event_name, {
      currency: event.currency || 'USD',
      value: event.value || 0,
      transaction_id: event.transaction_id,
      items: event.items || [],
      ...event.custom_parameters
    });
  }

  // Track download events
  trackDownload(downloadType: string, version?: string, source?: string) {
    this.trackConversion({
      event_name: 'download',
      value: 1,
      custom_parameters: {
        download_type: downloadType,
        version: version || 'latest',
        source: source || 'website',
        content_group1: 'download'
      }
    });
  }

  // Track button clicks
  trackButtonClick(buttonName: string, location: string, url?: string) {
    this.trackEvent({
      action: 'click',
      category: 'button',
      label: `${buttonName} - ${location}`,
      custom_parameters: {
        button_name: buttonName,
        button_location: location,
        destination_url: url
      }
    });
  }

  // Track scroll depth
  trackScrollDepth(percentage: number) {
    this.trackEvent({
      action: 'scroll',
      category: 'engagement',
      label: `${percentage}%`,
      value: percentage,
      custom_parameters: {
        scroll_depth: percentage
      }
    });
  }

  // Track user engagement
  trackEngagement(event_name: string, engagement_time_msec: number) {
    if (!this.isInitialized) return;
    
    window.gtag('event', 'user_engagement', {
      engagement_time_msec,
      custom_parameters: {
        event_name,
        page_title: document.title,
        page_location: window.location.href
      }
    });
  }

  // Track A/B test variants
  trackAbTest(experiment_id: string, variant_id: string) {
    if (!this.isInitialized) return;
    
    window.gtag('config', this.gaId!, {
      custom_map: {
        custom_parameter_1: 'experiment_id',
        custom_parameter_2: 'variant_id'
      }
    });

    window.gtag('event', 'ab_test_impression', {
      experiment_id,
      variant_id,
      custom_parameter_1: experiment_id,
      custom_parameter_2: variant_id
    });
  }

  // Enable/disable analytics based on consent
  setConsent(granted: boolean) {
    window.gtag('consent', 'update', {
      analytics_storage: granted ? 'granted' : 'denied',
      ad_storage: granted ? 'granted' : 'denied',
      ad_user_data: granted ? 'granted' : 'denied',
      ad_personalization: granted ? 'granted' : 'denied'
    });
  }
}

// Create singleton instance
export const analytics = new Analytics();

// Scroll depth tracking utility
export class ScrollTracker {
  private thresholds = [25, 50, 75, 90, 100];
  private triggered = new Set<number>();

  constructor() {
    this.setupScrollTracking();
  }

  private setupScrollTracking() {
    let ticking = false;

    const trackScroll = () => {
      const scrollTop = window.pageYOffset;
      const docHeight = document.documentElement.scrollHeight - window.innerHeight;
      const scrollPercent = Math.round((scrollTop / docHeight) * 100);

      this.thresholds.forEach(threshold => {
        if (scrollPercent >= threshold && !this.triggered.has(threshold)) {
          this.triggered.add(threshold);
          analytics.trackScrollDepth(threshold);
        }
      });

      ticking = false;
    };

    const requestTick = () => {
      if (!ticking) {
        requestAnimationFrame(trackScroll);
        ticking = true;
      }
    };

    window.addEventListener('scroll', requestTick, { passive: true });
  }
}

// A/B Testing Framework
export class ABTestFramework {
  private experiments: Map<string, string> = new Map();

  // Define an A/B test
  defineExperiment(
    experimentId: string,
    variants: string[],
    trafficAllocation: number = 1.0
  ) {
    const variant = this.assignVariant(experimentId, variants, trafficAllocation);
    this.experiments.set(experimentId, variant);
    
    // Track the variant assignment
    analytics.trackAbTest(experimentId, variant);
    
    return variant;
  }

  // Get variant for user
  private assignVariant(
    experimentId: string,
    variants: string[],
    trafficAllocation: number
  ): string {
    // Use localStorage for consistent variant assignment
    const storageKey = `ab_test_${experimentId}`;
    const stored = localStorage.getItem(storageKey);
    
    if (stored && variants.includes(stored)) {
      return stored;
    }

    // Determine if user should be in experiment
    const userId = this.getUserId();
    const hash = this.hashString(`${userId}_${experimentId}`);
    const shouldInclude = (hash % 100) < (trafficAllocation * 100);
    
    if (!shouldInclude) {
      return 'control';
    }

    // Assign variant
    const variantIndex = hash % variants.length;
    const variant = variants[variantIndex];
    
    localStorage.setItem(storageKey, variant);
    return variant;
  }

  // Get consistent user ID
  private getUserId(): string {
    let userId = localStorage.getItem('user_id');
    if (!userId) {
      userId = Math.random().toString(36).substring(2, 15);
      localStorage.setItem('user_id', userId);
    }
    return userId;
  }

  // Simple hash function
  private hashString(str: string): number {
    let hash = 0;
    for (let i = 0; i < str.length; i++) {
      const char = str.charCodeAt(i);
      hash = ((hash << 5) - hash) + char;
      hash = hash & hash; // Convert to 32-bit integer
    }
    return Math.abs(hash);
  }

  // Get variant for an experiment
  public getVariant(experimentId: string): string | null {
    return this.experiments.get(experimentId) || null;
  }
}

export const abTesting = new ABTestFramework();
</file>

<file path="src/App.css">
/* Reset and base styles */
* {
  box-sizing: border-box;
}

.app {
  min-height: 100vh;
  overflow-x: hidden;
}

/* Container */
.container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
}

/* Focus styles for accessibility */
*:focus {
  outline: 2px solid #667eea;
  outline-offset: 2px;
}

/* Skip link for accessibility */
.skip-link {
  position: absolute;
  top: -40px;
  left: 6px;
  background: #667eea;
  color: white;
  padding: 8px;
  border-radius: 4px;
  text-decoration: none;
  z-index: 1001;
  transition: top 0.3s;
}

.skip-link:focus {
  top: 6px;
}

/* Navigation */
.navbar {
  position: fixed;
  top: 0;
  left: 0;
  right: 0;
  background: rgba(255, 255, 255, 0.95);
  backdrop-filter: blur(10px);
  border-bottom: 1px solid rgba(0, 0, 0, 0.1);
  z-index: 1000;
  padding: 1rem 0;
}

.nav-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
  display: flex;
  justify-content: space-between;
  align-items: center;
}

.nav-logo {
  display: flex;
  align-items: center;
  gap: 0.5rem;
  font-weight: 700;
  font-size: 1.5rem;
  color: #1a1a1a;
  text-decoration: none;
}

.logo-icon {
  font-size: 1.8rem;
}

.nav-links {
  display: flex;
  align-items: center;
  gap: 2rem;
}

.nav-links a {
  color: #4a5568;
  text-decoration: none;
  font-weight: 500;
  transition: color 0.2s;
  position: relative;
}

.nav-links a:hover {
  color: #2d3748;
}

.nav-links a:focus {
  outline: 2px solid #667eea;
  outline-offset: 4px;
  border-radius: 4px;
}

/* Mobile menu toggle */
.mobile-menu-toggle {
  display: none;
  background: none;
  border: none;
  font-size: 1.5rem;
  color: #4a5568;
  cursor: pointer;
  padding: 0.5rem;
  border-radius: 4px;
}

.mobile-menu-toggle:hover {
  background: rgba(0, 0, 0, 0.05);
}

.cta-button {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 0.75rem 1.5rem;
  border-radius: 8px;
  font-weight: 600;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
}

.cta-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 8px 25px rgba(102, 126, 234, 0.3);
}

.cta-button:focus {
  outline: 2px solid #ffffff;
  outline-offset: 2px;
}

/* Hero Section */
.hero {
  padding: 8rem 0 4rem;
  background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
  min-height: 100vh;
  display: flex;
  align-items: center;
}

.hero-container {
  max-width: 1200px;
  margin: 0 auto;
  padding: 0 2rem;
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
}

.hero-title {
  font-size: 3.5rem;
  font-weight: 800;
  line-height: 1.1;
  color: #1a1a1a;
  margin-bottom: 1.5rem;
}

.gradient-text {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.hero-subtitle {
  font-size: 1.25rem;
  color: #4a5568;
  line-height: 1.6;
  margin-bottom: 2rem;
}

.hero-buttons {
  display: flex;
  gap: 1rem;
  margin-bottom: 3rem;
}

.primary-button {
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border: none;
  padding: 1rem 2rem;
  border-radius: 12px;
  font-weight: 600;
  font-size: 1.1rem;
  cursor: pointer;
  transition: transform 0.2s, box-shadow 0.2s;
}

.primary-button:hover {
  transform: translateY(-2px);
  box-shadow: 0 12px 35px rgba(102, 126, 234, 0.4);
}

.secondary-button {
  background: transparent;
  color: #4a5568;
  border: 2px solid #e2e8f0;
  padding: 1rem 2rem;
  border-radius: 12px;
  font-weight: 600;
  font-size: 1.1rem;
  cursor: pointer;
  transition: all 0.2s;
}

.secondary-button:hover {
  border-color: #cbd5e0;
  background: #f7fafc;
}

.hero-stats {
  display: flex;
  gap: 2rem;
  justify-content: flex-start;
}

.stat {
  text-align: center;
  min-width: 80px;
}

.stat-number {
  display: block;
  font-size: 2rem;
  font-weight: 800;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  -webkit-background-clip: text;
  -webkit-text-fill-color: transparent;
  background-clip: text;
}

.stat-label {
  display: block;
  font-size: 0.875rem;
  color: #718096;
  font-weight: 500;
  margin-top: 0.25rem;
}

/* Terminal Demo - Use TypewriterTerminal component styles */
.hero-terminal,
.cli-demo-terminal {
  width: 100%;
  max-width: none;
}

/* Features Section */
.features {
  padding: 6rem 0;
  background: white;
}

.section-title {
  text-align: center;
  font-size: 2.5rem;
  font-weight: 700;
  color: #1a1a1a;
  margin-bottom: 3rem;
  line-height: 1.2;
}

.features-grid {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(320px, 1fr));
  gap: 2rem;
  align-items: start;
}

.feature {
  padding: 2.5rem 2rem;
  background: #f7fafc;
  border-radius: 16px;
  text-align: center;
  transition: transform 0.2s, box-shadow 0.2s;
  height: 100%;
  display: flex;
  flex-direction: column;
  align-items: center;
}

.feature:hover {
  transform: translateY(-4px);
  box-shadow: 0 12px 35px rgba(0, 0, 0, 0.1);
}

.feature-icon {
  font-size: 3rem;
  margin-bottom: 1.5rem;
  filter: drop-shadow(0 2px 4px rgba(0, 0, 0, 0.1));
}

.feature h3 {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1a1a1a;
  margin-bottom: 1rem;
}

.feature p {
  color: #4a5568;
  line-height: 1.6;
  flex-grow: 1;
  max-width: 280px;
}

/* CLI Demo Section */
.cli-demo {
  padding: 6rem 0;
  background: linear-gradient(135deg, #f7fafc 0%, #edf2f7 100%);
}

.demo-grid {
  display: grid;
  grid-template-columns: 1fr 1fr;
  gap: 4rem;
  align-items: center;
}

.demo-content h3 {
  font-size: 1.75rem;
  font-weight: 700;
  color: #1a1a1a;
  margin-bottom: 1.5rem;
}

.command-list {
  list-style: none;
  padding: 0;
}

.command-list li {
  margin-bottom: 1rem;
  padding: 1rem;
  background: white;
  border-radius: 8px;
  box-shadow: 0 2px 8px rgba(0, 0, 0, 0.1);
}

.command-list code {
  background: #667eea;
  color: white;
  padding: 0.25rem 0.5rem;
  border-radius: 4px;
  font-weight: 600;
  margin-right: 0.5rem;
}

/* Getting Started Section */
.getting-started {
  padding: 6rem 0;
  background: white;
}

.steps {
  display: grid;
  grid-template-columns: repeat(auto-fit, minmax(300px, 1fr));
  gap: 2rem;
  margin-top: 3rem;
}

.step {
  text-align: center;
  padding: 2rem;
}

.step-number {
  display: inline-flex;
  align-items: center;
  justify-content: center;
  width: 3rem;
  height: 3rem;
  background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
  color: white;
  border-radius: 50%;
  font-weight: 700;
  font-size: 1.25rem;
  margin-bottom: 1rem;
}

.step h3 {
  font-size: 1.5rem;
  font-weight: 700;
  color: #1a1a1a;
  margin-bottom: 1rem;
}

.step pre {
  background: #1a1a1a;
  color: #e0e0e0;
  padding: 1rem;
  border-radius: 8px;
  overflow-x: auto;
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
}

/* Footer */
.footer {
  background: #1a1a1a;
  color: #e0e0e0;
  padding: 4rem 0 2rem;
}

.footer-content {
  display: grid;
  grid-template-columns: 1fr 2fr;
  gap: 4rem;
  margin-bottom: 2rem;
}

.footer-brand {
  display: flex;
  flex-direction: column;
  gap: 1rem;
}

.footer-brand .logo-icon {
  font-size: 2rem;
}

.footer-brand .logo-text {
  font-size: 1.5rem;
  font-weight: 700;
}

.footer-brand p {
  color: #a0a0a0;
  margin: 0;
}

.footer-links {
  display: grid;
  grid-template-columns: repeat(3, 1fr);
  gap: 2rem;
}

.link-group h4 {
  color: white;
  font-weight: 600;
  margin-bottom: 1rem;
}

.link-group a {
  display: block;
  color: #a0a0a0;
  text-decoration: none;
  margin-bottom: 0.5rem;
  transition: color 0.2s;
}

.link-group a:hover {
  color: #e0e0e0;
}

.footer-bottom {
  border-top: 1px solid #2d2d2d;
  padding-top: 2rem;
  text-align: center;
  color: #a0a0a0;
}

/* Responsive Design */
@media (max-width: 1024px) {
  .hero-container {
    gap: 3rem;
  }
  
  .demo-grid {
    gap: 3rem;
  }
}

@media (max-width: 768px) {
  .nav-container {
    padding: 0 1rem;
  }
  
  .nav-links {
    position: fixed;
    top: 100%;
    left: 0;
    right: 0;
    background: rgba(255, 255, 255, 0.98);
    backdrop-filter: blur(10px);
    flex-direction: column;
    padding: 2rem;
    gap: 1.5rem;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.1);
    border-top: 1px solid rgba(0, 0, 0, 0.1);
    transition: top 0.3s ease-in-out, opacity 0.3s ease-in-out;
    z-index: 999;
    opacity: 0;
    visibility: hidden;
  }
  
  .nav-links.open {
    top: 76px;
    opacity: 1;
    visibility: visible;
  }
  
  /* Mobile menu overlay */
  .nav-links.open::before {
    content: '';
    position: fixed;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background: rgba(0, 0, 0, 0.2);
    z-index: -1;
    animation: fadeIn 0.3s ease-out;
  }
  
  @keyframes fadeIn {
    from { opacity: 0; }
    to { opacity: 1; }
  }
  
  .nav-links a {
    display: block;
    padding: 0.75rem 1rem;
    border-radius: 8px;
    transition: background-color 0.2s;
  }
  
  .nav-links a:hover {
    background: rgba(102, 126, 234, 0.1);
  }
  
  .mobile-menu-toggle {
    display: block;
  }
  
  .hero {
    padding: 6rem 0 4rem;
  }
  
  .hero-container {
    grid-template-columns: 1fr;
    gap: 3rem;
    text-align: center;
  }
  
  .hero-title {
    font-size: 2.25rem;
  }
  
  .hero-subtitle {
    font-size: 1.125rem;
  }
  
  .hero-buttons {
    flex-direction: column;
    align-items: center;
    gap: 1rem;
  }
  
  .hero-buttons .primary-button,
  .hero-buttons .secondary-button {
    width: 100%;
    max-width: 280px;
  }
  
  .hero-stats {
    justify-content: center;
  }
  
  .section-title {
    font-size: 2rem;
  }
  
  .features-grid {
    grid-template-columns: 1fr;
    gap: 1.5rem;
  }
  
  .demo-grid {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .steps {
    grid-template-columns: 1fr;
    gap: 2rem;
  }
  
  .footer-content {
    grid-template-columns: 1fr;
    gap: 2rem;
    text-align: center;
  }
  
  .footer-links {
    grid-template-columns: repeat(3, 1fr);
    gap: 1rem;
  }
  
  .container {
    padding: 0 1rem;
  }
}

@media (max-width: 480px) {
  .hero-title {
    font-size: 1.875rem;
  }
  
  .hero-subtitle {
    font-size: 1rem;
  }
  
  .hero-stats {
    gap: 1rem;
  }
  
  .stat-number {
    font-size: 1.5rem;
  }
  
  .features-grid {
    grid-template-columns: 1fr;
  }
  
  .feature {
    padding: 2rem 1.5rem;
  }
  
  .footer-links {
    grid-template-columns: 1fr;
    text-align: left;
  }
}
</file>

<file path="src/App.tsx">
import { useState, useEffect } from 'react'
import './App.css'
import { TypewriterTerminal } from './components/TypewriterTerminal'
import { CookieConsent } from './components/CookieConsent'
import { TestimonialsSection } from './components/TestimonialsSection'
import { InstallationWizard } from './components/InstallationWizard'
import { FAQSection } from './components/FAQSection'
import { useAnalytics, useDownloadTracking, useButtonTracking, useEngagementTracking, useAbTesting } from './hooks/useAnalytics'

function App() {
  const [isMobileMenuOpen, setIsMobileMenuOpen] = useState(false)
  
  // Close mobile menu when clicking outside or on ESC key
  useEffect(() => {
    const handleClickOutside = (event: MouseEvent) => {
      const target = event.target as Element
      if (isMobileMenuOpen && !target.closest('.nav-container')) {
        setIsMobileMenuOpen(false)
      }
    }
    
    const handleEscKey = (event: KeyboardEvent) => {
      if (event.key === 'Escape' && isMobileMenuOpen) {
        setIsMobileMenuOpen(false)
      }
    }
    
    if (isMobileMenuOpen) {
      document.addEventListener('click', handleClickOutside)
      document.addEventListener('keydown', handleEscKey)
      document.body.style.overflow = 'hidden'
    } else {
      document.body.style.overflow = 'unset'
    }
    
    return () => {
      document.removeEventListener('click', handleClickOutside)
      document.removeEventListener('keydown', handleEscKey)
      document.body.style.overflow = 'unset'
    }
  }, [isMobileMenuOpen])
  // Initialize analytics
  useAnalytics(import.meta.env.VITE_GA_MEASUREMENT_ID)
  useEngagementTracking()
  
  // Analytics hooks
  const { trackDownload } = useDownloadTracking()
  const { trackClick } = useButtonTracking()
  const { createExperiment } = useAbTesting()
  
  // A/B test for hero CTA button text
  const heroCtaVariant = createExperiment('hero_cta_text', [
    'Download TaskWing',
    'Get TaskWing Free',
    'Start Using TaskWing'
  ], 0.8) // 80% of users in experiment
  // Define multiple demo sequences for the hero terminal
  const heroSequences = [
    {
      lines: [
        { type: 'command' as const, text: 'taskwing add', delay: 120 },
        { type: 'output' as const, text: '✓ Task created: Implement user authentication', delay: 60 },
        { type: 'command' as const, text: 'taskwing mcp', delay: 100 },
        { type: 'output' as const, text: '🤖 MCP server started - AI tools ready', delay: 50 },
        { type: 'command' as const, text: 'taskwing list', delay: 80 },
        { type: 'output' as const, text: '📋 3 tasks • 1 in-progress • 2 pending', delay: 40 }
      ],
      pauseAfter: 3000
    },
    {
      lines: [
        { type: 'command' as const, text: 'taskwing current set abc-1', delay: 110 },
        { type: 'output' as const, text: '✓ Current task: Implement user authentication', delay: 50 },
        { type: 'command' as const, text: 'taskwing done abc-1', delay: 90 },
        { type: 'output' as const, text: '🎉 Task completed! Well done.', delay: 60 },
        { type: 'command' as const, text: 'taskwing add "Fix database migration"', delay: 130 },
        { type: 'output' as const, text: '✓ Task created: Fix database migration', delay: 50 }
      ],
      pauseAfter: 3000
    },
    {
      lines: [
        { type: 'command' as const, text: 'taskwing list --priority high', delay: 140 },
        { type: 'output' as const, text: '┌─────────────────────────────────────┐', delay: 30 },
        { type: 'output' as const, text: '│ ID    │ Title              │ Priority │', delay: 30 },
        { type: 'output' as const, text: '├─────────────────────────────────────┤', delay: 30 },
        { type: 'output' as const, text: '│ def-2 │ Fix security bug   │ high     │', delay: 40 },
        { type: 'output' as const, text: '└─────────────────────────────────────┘', delay: 30 }
      ],
      pauseAfter: 3500
    }
  ]

  // Define demo sequences for the CLI demo section
  const cliDemoSequences = [
    {
      lines: [
        { type: 'command' as const, text: 'taskwing list --status pending', delay: 120 },
        { type: 'output' as const, text: '┌─────────────────────────────────────┐', delay: 40 },
        { type: 'output' as const, text: '│ ID    │ Title              │ Priority │', delay: 40 },
        { type: 'output' as const, text: '├─────────────────────────────────────┤', delay: 40 },
        { type: 'output' as const, text: '│ abc-1 │ Fix authentication │ high     │', delay: 50 },
        { type: 'output' as const, text: '│ def-2 │ Update docs        │ medium   │', delay: 50 },
        { type: 'output' as const, text: '└─────────────────────────────────────┘', delay: 40 }
      ],
      pauseAfter: 4000
    }
  ]

  return (
    <div className="app">
      <a href="#main" className="skip-link">Skip to main content</a>
      
      {/* Navigation */}
      <nav className="navbar" role="navigation" aria-label="Main navigation">
        <div className="nav-container">
          <a href="#" className="nav-logo" aria-label="TaskWing home">
            <span className="logo-icon" aria-hidden="true">🪶</span>
            <span className="logo-text">TaskWing</span>
          </a>
          
          <button 
            className="mobile-menu-toggle"
            onClick={(e) => {
              e.stopPropagation()
              setIsMobileMenuOpen(!isMobileMenuOpen)
            }}
            aria-expanded={isMobileMenuOpen}
            aria-controls="nav-links"
            aria-label="Toggle navigation menu"
          >
            {isMobileMenuOpen ? '✕' : '☰'}
          </button>
          
          <div 
            id="nav-links"
            className={`nav-links ${isMobileMenuOpen ? 'open' : ''}`}
          >
            <a 
              href="#features"
              onClick={() => {
                trackClick('Features', 'navigation')
                setIsMobileMenuOpen(false)
              }}
            >
              Features
            </a>
            <a 
              href="#getting-started"
              onClick={() => {
                trackClick('Getting Started', 'navigation')
                setIsMobileMenuOpen(false)
              }}
            >
              Getting Started
            </a>
            <a 
              href="#faq"
              onClick={() => {
                trackClick('FAQ', 'navigation')
                setIsMobileMenuOpen(false)
              }}
            >
              FAQ
            </a>
            <a 
              href="https://github.com/josephgoksu/TaskWing" 
              target="_blank" 
              rel="noopener noreferrer"
              onClick={() => {
                trackClick('GitHub', 'navigation', 'https://github.com/josephgoksu/TaskWing')
                setIsMobileMenuOpen(false)
              }}
            >
              GitHub
            </a>
            <button 
              className="cta-button"
              onClick={() => {
                trackDownload('cli', { 
                  version: 'latest', 
                  source: 'nav_button',
                  buttonLocation: 'navigation'
                })
                setIsMobileMenuOpen(false)
              }}
            >
              Get Started
            </button>
          </div>
        </div>
      </nav>

      {/* Hero Section */}
      <main id="main">
        <section className="hero">
          <div className="hero-container">
            <div className="hero-content">
            <h1 className="hero-title">
              AI-Assisted Task Management
              <span className="gradient-text"> for Developers</span>
            </h1>
            <p className="hero-subtitle">
              TaskWing is a powerful CLI task manager with built-in AI integration through Model Context Protocol (MCP). 
              Streamline your workflow with intelligent task generation, dependency tracking, and seamless AI tool interaction.
            </p>
            <div className="hero-buttons">
              <button 
                className="primary-button"
                onClick={() => {
                  trackDownload('cli', { 
                    version: 'latest', 
                    source: 'hero_button',
                    buttonLocation: 'hero_section'
                  })
                }}
              >
                {heroCtaVariant === 'control' ? 'Download TaskWing' : heroCtaVariant}
              </button>
              <button 
                className="secondary-button"
                onClick={() => {
                  trackClick('View on GitHub', 'hero_section', 'https://github.com/josephgoksu/TaskWing')
                  window.open('https://github.com/josephgoksu/TaskWing', '_blank')
                }}
              >
                View on GitHub
              </button>
            </div>
            <div className="hero-stats">
              <div className="stat">
                <span className="stat-number">12</span>
                <span className="stat-label">MCP Tools</span>
              </div>
              <div className="stat">
                <span className="stat-number">CLI</span>
                <span className="stat-label">Native</span>
              </div>
              <div className="stat">
                <span className="stat-number">Go</span>
                <span className="stat-label">Powered</span>
              </div>
            </div>
          </div>
          <div className="hero-demo">
            <TypewriterTerminal 
              sequences={heroSequences}
              title="taskwing"
              className="hero-terminal"
            />
          </div>
        </div>
        </section>

        {/* Features Section */}
        <section id="features" className="features">
        <div className="container">
          <h2 className="section-title">Why Choose TaskWing?</h2>
          <div className="features-grid">
            <div className="feature">
              <div className="feature-icon">🤖</div>
              <h3>AI-Powered</h3>
              <p>Built-in Model Context Protocol integration enables seamless AI assistance for task generation, breakdown, and management.</p>
            </div>
            <div className="feature">
              <div className="feature-icon">⚡</div>
              <h3>Lightning Fast</h3>
              <p>Native Go implementation ensures blazing-fast performance for all task operations, even with thousands of tasks.</p>
            </div>
            <div className="feature">
              <div className="feature-icon">🔗</div>
              <h3>Smart Dependencies</h3>
              <p>Automatic dependency tracking with circular dependency detection prevents invalid task relationships.</p>
            </div>
            <div className="feature">
              <div className="feature-icon">📊</div>
              <h3>Rich Metadata</h3>
              <p>Comprehensive task properties including priorities, status tracking, subtasks, and acceptance criteria.</p>
            </div>
            <div className="feature">
              <div className="feature-icon">🔧</div>
              <h3>Developer-First</h3>
              <p>CLI-native with interactive prompts, project-aware configuration, and seamless Git workflow integration.</p>
            </div>
            <div className="feature">
              <div className="feature-icon">🌐</div>
              <h3>MCP Integration</h3>
              <p>12 specialized MCP tools for batch operations, advanced search, and intelligent task context generation.</p>
            </div>
          </div>
          </div>
        </section>

        {/* CLI Demo Section */}
        <section className="cli-demo">
        <div className="container">
          <h2 className="section-title">Simple Yet Powerful</h2>
          <div className="demo-grid">
            <div className="demo-content">
              <h3>Core Commands</h3>
              <ul className="command-list">
                <li><code>taskwing init</code> - Initialize TaskWing in your project</li>
                <li><code>taskwing add</code> - Create new tasks interactively</li>
                <li><code>taskwing list</code> - View and filter your tasks</li>
                <li><code>taskwing done &lt;id&gt;</code> - Mark tasks as completed</li>
                <li><code>taskwing mcp</code> - Start MCP server for AI integration</li>
              </ul>
            </div>
            <div className="demo-terminal">
              <TypewriterTerminal 
                sequences={cliDemoSequences}
                title="taskwing demo"
                className="cli-demo-terminal"
              />
            </div>
          </div>
          </div>
        </section>

        {/* Testimonials and Social Proof Section */}
        <TestimonialsSection />

        {/* Getting Started Section */}
        <section id="getting-started" className="getting-started">
          <div className="container">
            <h2 className="section-title">Get Started in Minutes</h2>
            <InstallationWizard />
          </div>
        </section>

        {/* FAQ Section */}
        <FAQSection />
      </main>

      {/* Footer */}
      <footer className="footer" role="contentinfo">
        <div className="container">
          <div className="footer-content">
            <div className="footer-brand">
              <span className="logo-icon" aria-hidden="true">🪶</span>
              <span className="logo-text">TaskWing</span>
              <p>AI-assisted task management for developers</p>
            </div>
            <div className="footer-links">
              <div className="link-group">
                <h4>Product</h4>
                <a 
                  href="#features"
                  onClick={() => trackClick('Features', 'footer')}
                >
                  Features
                </a>
                <a 
                  href="#docs"
                  onClick={() => trackClick('Documentation', 'footer')}
                >
                  Documentation
                </a>
                <a 
                  href="#getting-started"
                  onClick={() => trackClick('Getting Started', 'footer')}
                >
                  Getting Started
                </a>
                <a 
                  href="#faq"
                  onClick={() => trackClick('FAQ', 'footer')}
                >
                  FAQ
                </a>
              </div>
              <div className="link-group">
                <h4>Development</h4>
                <a 
                  href="https://github.com/josephgoksu/TaskWing" 
                  target="_blank"
                  onClick={() => trackClick('GitHub', 'footer', 'https://github.com/josephgoksu/TaskWing')}
                >
                  GitHub
                </a>
                <a 
                  href="https://github.com/josephgoksu/TaskWing/issues" 
                  target="_blank"
                  onClick={() => trackClick('Issues', 'footer', 'https://github.com/josephgoksu/TaskWing/issues')}
                >
                  Issues
                </a>
                <a 
                  href="https://github.com/josephgoksu/TaskWing/blob/main/CONTRIBUTING.md" 
                  target="_blank"
                  onClick={() => trackClick('Contributing', 'footer')}
                >
                  Contributing
                </a>
              </div>
              <div className="link-group">
                <h4>Community</h4>
                <a 
                  href="#" 
                  target="_blank"
                  onClick={() => trackClick('Discord', 'footer')}
                >
                  Discord
                </a>
                <a 
                  href="#" 
                  target="_blank"
                  onClick={() => trackClick('Twitter', 'footer')}
                >
                  Twitter
                </a>
                <a 
                  href="#" 
                  target="_blank"
                  onClick={() => trackClick('Blog', 'footer')}
                >
                  Blog
                </a>
              </div>
            </div>
          </div>
          <div className="footer-bottom">
            <p>&copy; 2024 TaskWing. Open source software built with <span aria-label="love">❤️</span></p>
          </div>
        </div>
      </footer>
      
      {/* Cookie Consent */}
      <CookieConsent />
    </div>
  )
}

export default App
</file>

<file path="src/index.css">
:root {
  font-family: 'Inter', -apple-system, BlinkMacSystemFont, 'Segoe UI', 'Roboto', 'Oxygen',
    'Ubuntu', 'Cantarell', 'Fira Sans', 'Droid Sans', 'Helvetica Neue',
    sans-serif;
  line-height: 1.6;
  font-weight: 400;

  color-scheme: light dark;
  color: #213547;
  background-color: #ffffff;

  font-synthesis: none;
  text-rendering: optimizeLegibility;
  -webkit-font-smoothing: antialiased;
  -moz-osx-font-smoothing: grayscale;
}

* {
  margin: 0;
  padding: 0;
  box-sizing: border-box;
}

html {
  scroll-behavior: smooth;
}

@media (prefers-reduced-motion: reduce) {
  html {
    scroll-behavior: auto;
  }
}

body {
  margin: 0;
  min-width: 320px;
  min-height: 100vh;
  overflow-x: hidden;
}

h1, h2, h3, h4, h5, h6 {
  font-weight: 700;
  line-height: 1.2;
}

p {
  margin: 0;
}

a {
  font-weight: 500;
  color: #646cff;
  text-decoration: inherit;
}

a:hover {
  color: #535bf2;
}

button {
  border-radius: 8px;
  border: 1px solid transparent;
  padding: 0.6em 1.2em;
  font-size: 1em;
  font-weight: 500;
  font-family: inherit;
  background-color: #f9f9f9;
  cursor: pointer;
  transition: all 0.25s ease;
}

button:hover {
  border-color: #646cff;
}

button:focus,
button:focus-visible {
  outline: 2px solid #667eea;
  outline-offset: 2px;
}

button:disabled {
  opacity: 0.6;
  cursor: not-allowed;
}

/* Improved focus management */
:focus {
  outline: 2px solid #667eea;
  outline-offset: 2px;
}

/* Better focus for interactive elements */
a:focus,
button:focus,
input:focus,
textarea:focus,
select:focus {
  outline: 2px solid #667eea;
  outline-offset: 2px;
}

/* Dark mode support */
@media (prefers-color-scheme: dark) {
  :root {
    color: #ffffff;
    background-color: #242424;
  }
  
  a:hover {
    color: #747bff;
  }
  
  button {
    background-color: #1a1a1a;
  }
}

/* Typography improvements */
code {
  font-family: 'SF Mono', Monaco, 'Cascadia Code', 'Roboto Mono', Consolas, 'Courier New', monospace;
  background-color: #f1f5f9;
  padding: 0.125rem 0.25rem;
  border-radius: 0.25rem;
  font-size: 0.875em;
  color: #475569;
}

pre code {
  background: none;
  padding: 0;
  color: inherit;
}

/* Better text selection */
::selection {
  background-color: rgba(102, 126, 234, 0.3);
  color: inherit;
}

/* Smooth transitions for all interactive elements */
* {
  transition: color 0.2s ease, background-color 0.2s ease, border-color 0.2s ease, transform 0.2s ease, box-shadow 0.2s ease;
}

@media (prefers-reduced-motion: reduce) {
  * {
    transition: none !important;
    animation: none !important;
  }
}
</file>

<file path="src/main.tsx">
import { StrictMode } from 'react'
import { createRoot } from 'react-dom/client'
import './index.css'
import App from './App.tsx'

createRoot(document.getElementById('root')!).render(
  <StrictMode>
    <App />
  </StrictMode>,
)
</file>

<file path="src/vite-env.d.ts">
/// <reference types="vite/client" />
</file>

<file path=".env.example">
# Google Analytics 4 Measurement ID
VITE_GA_MEASUREMENT_ID=G-XXXXXXXXXX

# Environment (development, staging, production)
VITE_ENVIRONMENT=development

# Enable analytics in development (optional, default: false)
VITE_ENABLE_ANALYTICS_IN_DEV=false
</file>

<file path=".gitignore">
# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*
pnpm-debug.log*
lerna-debug.log*

node_modules
dist
dist-ssr
*.local

# Editor directories and files
.vscode/*
!.vscode/extensions.json
.idea
.DS_Store
*.suo
*.ntvs*
*.njsproj
*.sln
*.sw?
</file>

<file path="eslint.config.js">
import js from '@eslint/js'
import globals from 'globals'
import reactHooks from 'eslint-plugin-react-hooks'
import reactRefresh from 'eslint-plugin-react-refresh'
import tseslint from 'typescript-eslint'
import { globalIgnores } from 'eslint/config'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      js.configs.recommended,
      tseslint.configs.recommended,
      reactHooks.configs['recommended-latest'],
      reactRefresh.configs.vite,
    ],
    languageOptions: {
      ecmaVersion: 2020,
      globals: globals.browser,
    },
  },
])
</file>

<file path="index.html">
<!doctype html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <link rel="icon" type="image/svg+xml" href="/vite.svg" />
    <meta name="viewport" content="width=device-width, initial-scale=1.0" />
    <title>TaskWing - AI-Assisted Task Management for Developers</title>
    
    <!-- Performance optimizations -->
    <meta name="theme-color" content="#3b82f6" />
    <link rel="dns-prefetch" href="//fonts.googleapis.com">
    <link rel="dns-prefetch" href="//fonts.gstatic.com">
    <link rel="dns-prefetch" href="//www.googletagmanager.com">
    <meta name="description" content="TaskWing is a powerful CLI task manager with built-in AI integration through Model Context Protocol (MCP). Streamline your workflow with intelligent task generation, dependency tracking, and seamless AI tool interaction." />
    <meta name="keywords" content="task management, CLI, AI, MCP, Model Context Protocol, developer tools, productivity, Go, task tracker" />
    <meta name="author" content="TaskWing" />
    
    <!-- Open Graph / Facebook -->
    <meta property="og:type" content="website" />
    <meta property="og:url" content="https://taskwing.app/" />
    <meta property="og:title" content="TaskWing - AI-Assisted Task Management for Developers" />
    <meta property="og:description" content="TaskWing is a powerful CLI task manager with built-in AI integration through Model Context Protocol (MCP). Streamline your workflow with intelligent task generation, dependency tracking, and seamless AI tool interaction." />
    
    <!-- Twitter -->
    <meta property="twitter:card" content="summary_large_image" />
    <meta property="twitter:url" content="https://taskwing.app/" />
    <meta property="twitter:title" content="TaskWing - AI-Assisted Task Management for Developers" />
    <meta property="twitter:description" content="TaskWing is a powerful CLI task manager with built-in AI integration through Model Context Protocol (MCP). Streamline your workflow with intelligent task generation, dependency tracking, and seamless AI tool interaction." />
    
    <!-- Optimized font loading for performance -->
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet" media="print" onload="this.media='all'">
    <noscript><link href="https://fonts.googleapis.com/css2?family=Inter:wght@400;500;600;700;800&display=swap" rel="stylesheet"></noscript>
    
    <!-- Structured Data Markup -->
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "SoftwareApplication",
      "name": "TaskWing",
      "description": "TaskWing is a powerful CLI task manager with built-in AI integration through Model Context Protocol (MCP). Streamline your workflow with intelligent task generation, dependency tracking, and seamless AI tool interaction.",
      "applicationCategory": "DeveloperApplication",
      "operatingSystem": "Linux, macOS, Windows",
      "programmingLanguage": "Go",
      "url": "https://taskwing.app",
      "downloadUrl": "https://github.com/taskwing/taskwing/releases",
      "codeRepository": "https://github.com/taskwing/taskwing",
      "license": "https://opensource.org/licenses/MIT",
      "author": {
        "@type": "Organization",
        "name": "TaskWing",
        "url": "https://taskwing.app"
      },
      "offers": {
        "@type": "Offer",
        "price": "0",
        "priceCurrency": "USD"
      },
      "aggregateRating": {
        "@type": "AggregateRating",
        "ratingValue": "4.8",
        "reviewCount": "150"
      },
      "keywords": "task management, CLI, AI, MCP, Model Context Protocol, developer tools, productivity, Go, task tracker",
      "featureList": [
        "AI-Powered task generation",
        "Model Context Protocol integration",
        "Smart dependency tracking",
        "Rich metadata support",
        "CLI-native interface",
        "9 specialized MCP tools"
      ]
    }
    </script>
    
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "Organization",
      "name": "TaskWing",
      "url": "https://taskwing.app",
      "logo": "https://taskwing.app/logo.png",
      "sameAs": [
        "https://github.com/taskwing/taskwing",
        "https://twitter.com/taskwing"
      ],
      "contactPoint": {
        "@type": "ContactPoint",
        "contactType": "customer support",
        "url": "https://github.com/taskwing/taskwing/issues"
      }
    }
    </script>
    
    <script type="application/ld+json">
    {
      "@context": "https://schema.org",
      "@type": "FAQPage",
      "mainEntity": [
        {
          "@type": "Question",
          "name": "What is TaskWing?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "TaskWing is a powerful CLI task manager with built-in AI integration through Model Context Protocol (MCP). It helps developers streamline their workflow with intelligent task generation, dependency tracking, and seamless AI tool interaction."
          }
        },
        {
          "@type": "Question",
          "name": "How do I install TaskWing?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "You can install TaskWing using Go: 'go install github.com/taskwing/taskwing@latest' or download pre-built binaries from the GitHub releases page."
          }
        },
        {
          "@type": "Question",
          "name": "What is Model Context Protocol (MCP)?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "MCP is a protocol that enables AI tools to interact with external systems. TaskWing includes 9 specialized MCP tools for batch operations, advanced search, and intelligent task context generation."
          }
        },
        {
          "@type": "Question",
          "name": "Does TaskWing support dependency tracking?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Yes, TaskWing includes smart dependency tracking with automatic circular dependency detection to prevent invalid task relationships."
          }
        },
        {
          "@type": "Question",
          "name": "Is TaskWing free to use?",
          "acceptedAnswer": {
            "@type": "Answer",
            "text": "Yes, TaskWing is open source software and free to use. You can find the source code on GitHub."
          }
        }
      ]
    }
    </script>
  </head>
  <body>
    <div id="root"></div>
    <script type="module" src="/src/main.tsx"></script>
  </body>
</html>
</file>

<file path="package.json">
{
  "name": "taskwing-landing",
  "private": true,
  "version": "0.0.0",
  "type": "module",
  "scripts": {
    "dev": "vite",
    "build": "tsc -b && vite build",
    "lint": "eslint .",
    "preview": "vite preview"
  },
  "dependencies": {
    "react": "^19.1.1",
    "react-dom": "^19.1.1"
  },
  "devDependencies": {
    "@eslint/js": "^9.33.0",
    "@types/react": "^19.1.10",
    "@types/react-dom": "^19.1.7",
    "@vitejs/plugin-react": "^5.0.0",
    "eslint": "^9.33.0",
    "eslint-plugin-react-hooks": "^5.2.0",
    "eslint-plugin-react-refresh": "^0.4.20",
    "globals": "^16.3.0",
    "typescript": "~5.8.3",
    "typescript-eslint": "^8.39.1",
    "vite": "^7.1.2"
  }
}
</file>

<file path="README.md">
# React + TypeScript + Vite

This template provides a minimal setup to get React working in Vite with HMR and some ESLint rules.

Currently, two official plugins are available:

- [@vitejs/plugin-react](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react) uses [Babel](https://babeljs.io/) for Fast Refresh
- [@vitejs/plugin-react-swc](https://github.com/vitejs/vite-plugin-react/blob/main/packages/plugin-react-swc) uses [SWC](https://swc.rs/) for Fast Refresh

## Expanding the ESLint configuration

If you are developing a production application, we recommend updating the configuration to enable type-aware lint rules:

```js
export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...

      // Remove tseslint.configs.recommended and replace with this
      ...tseslint.configs.recommendedTypeChecked,
      // Alternatively, use this for stricter rules
      ...tseslint.configs.strictTypeChecked,
      // Optionally, add this for stylistic rules
      ...tseslint.configs.stylisticTypeChecked,

      // Other configs...
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```

You can also install [eslint-plugin-react-x](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-x) and [eslint-plugin-react-dom](https://github.com/Rel1cx/eslint-react/tree/main/packages/plugins/eslint-plugin-react-dom) for React-specific lint rules:

```js
// eslint.config.js
import reactX from 'eslint-plugin-react-x'
import reactDom from 'eslint-plugin-react-dom'

export default tseslint.config([
  globalIgnores(['dist']),
  {
    files: ['**/*.{ts,tsx}'],
    extends: [
      // Other configs...
      // Enable lint rules for React
      reactX.configs['recommended-typescript'],
      // Enable lint rules for React DOM
      reactDom.configs.recommended,
    ],
    languageOptions: {
      parserOptions: {
        project: ['./tsconfig.node.json', './tsconfig.app.json'],
        tsconfigRootDir: import.meta.dirname,
      },
      // other options...
    },
  },
])
```
</file>

<file path="tsconfig.app.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.app.tsbuildinfo",
    "target": "ES2022",
    "useDefineForClassFields": true,
    "lib": ["ES2022", "DOM", "DOM.Iterable"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,
    "jsx": "react-jsx",

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["src"]
}
</file>

<file path="tsconfig.json">
{
  "files": [],
  "references": [
    { "path": "./tsconfig.app.json" },
    { "path": "./tsconfig.node.json" }
  ]
}
</file>

<file path="tsconfig.node.json">
{
  "compilerOptions": {
    "tsBuildInfoFile": "./node_modules/.tmp/tsconfig.node.tsbuildinfo",
    "target": "ES2023",
    "lib": ["ES2023"],
    "module": "ESNext",
    "skipLibCheck": true,

    /* Bundler mode */
    "moduleResolution": "bundler",
    "allowImportingTsExtensions": true,
    "verbatimModuleSyntax": true,
    "moduleDetection": "force",
    "noEmit": true,

    /* Linting */
    "strict": true,
    "noUnusedLocals": true,
    "noUnusedParameters": true,
    "erasableSyntaxOnly": true,
    "noFallthroughCasesInSwitch": true,
    "noUncheckedSideEffectImports": true
  },
  "include": ["vite.config.ts"]
}
</file>

<file path="vite.config.ts">
import { defineConfig } from 'vite'
import react from '@vitejs/plugin-react'

// https://vite.dev/config/
export default defineConfig({
  plugins: [react()],
  
  // Performance optimizations
  build: {
    // Enable minification
    minify: 'esbuild',
    
    // Optimize chunks
    rollupOptions: {
      output: {
        manualChunks: {
          // Separate vendor libraries for better caching
          vendor: ['react', 'react-dom'],
          analytics: ['./src/utils/analytics.ts', './src/hooks/useAnalytics.ts'],
        },
      },
    },
    
    // Target modern browsers for smaller bundles
    target: 'es2020',
    
    // Enable source maps for debugging (but keep them small)
    sourcemap: false, // Disable in production for smaller size
    
    // Optimize CSS
    cssCodeSplit: true,
  },
  
  // Optimize dependencies
  optimizeDeps: {
    include: ['react', 'react-dom'],
  },
  
  // Preload optimizations
  server: {
    preTransformRequests: false, // Only transform on demand
  },
})
</file>

</files>
